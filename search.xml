<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Map key 和 value 是否可以为 null</title>
      <link href="/posts/8df6bb10/"/>
      <url>/posts/8df6bb10/</url>
      
        <content type="html"><![CDATA[<p>目录(结论)：</p><ul><li>HashMap key 和 value 都可以为 null</li><li>HashTable、ConcurrentHashMap  中的 key 和 value 均不能为 null，但 ConcurrentHashMap  是主动判空，而 HashTable 的 value 主动判空，key 则是 调用 <code>key.hashCode()</code>  抛出异常</li></ul><p>[toc]</p><h2 id="HashMap-key-和-value-都可以为-null"><a href="#HashMap-key-和-value-都可以为-null" class="headerlink" title="HashMap key 和 value 都可以为 null"></a>HashMap key 和 value 都可以为 null</h2><p>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="keyword">null</span>, <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(map.get(<span class="keyword">null</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    System.out.println(map.get(<span class="number">1</span>));  <span class="comment">// 输出 null</span></span><br><span class="line">    System.out.println(map.get(<span class="number">99</span>));    <span class="comment">// 不存在的 key，输出 null</span></span><br><span class="line">    System.out.println(map.getOrDefault(<span class="number">99</span>, -<span class="number">1</span>));    <span class="comment">// 不存在的 key，输出自定义的默认值 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码1（key 为 null 的情况）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，hash(key) 方法，当 key 为 null 时，Hash 值为 0。</p><p>源码2（value 为 null 的情况）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过前面的测试代码实验，value 可以为 null，但是当 map 中 key 不存在时，也会返回 null （见源码2 第 41 行）。所以无法判断到底是 key 为 null，还是不存在，因此 JDK8 新增了 getOrDefault() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Overrides of JDK8 Map extension methods</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? defaultValue : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashTable-中的-key-和-value-均不能为-null"><a href="#HashTable-中的-key-和-value-均不能为-null" class="headerlink" title="HashTable 中的 key 和 value 均不能为 null"></a>HashTable 中的 key 和 value 均不能为 null</h2><p>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">    <span class="comment">// map.put(null, 1);</span></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.NullPointerException</span></span><br><span class="line"><span class="comment">// at java.util.Hashtable.put(Hashtable.java:461)</span></span><br></pre></td></tr></table></figure><p>源码3（HashTable 的 key 和 value 均不能为 null）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Make sure the value is not null</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            V old = entry.value;</span><br><span class="line">            entry.value = value;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addEntry(hash, key, value, index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，第 4 行先检查了 value，为 null 直接抛出异常，然后第 9 行通过 <code>key.hashCode()</code> 获取 hash 值，所以 key 也不能为 null。</p><h2 id="ConcurrentHashMap-中的-key-和-value-均不能为-null"><a href="#ConcurrentHashMap-中的-key-和-value-均不能为-null" class="headerlink" title="ConcurrentHashMap 中的 key 和 value 均不能为 null"></a>ConcurrentHashMap 中的 key 和 value 均不能为 null</h2><p>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// map.put(null, 1);</span></span><br><span class="line">    map.put(<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Exception in thread &quot;main&quot; java.lang.NullPointerException</span></span><br><span class="line">    <span class="comment">// at java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1011)</span></span><br><span class="line">    <span class="comment">// at java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:1006)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConcurrentHashMap 直接先对 key 和 value 进行了判空。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GitBash 设置命令别名</title>
      <link href="/posts/9ea5c55a/"/>
      <url>/posts/9ea5c55a/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/aliases.sh</span><br></pre></td></tr></table></figure><p>然后编辑需要的命令别名即可</p><p><img src="http://img.likeqc.top//2022/2022-04-10-10-56-34-image-20220410105634659.png" alt="GitBash 设置命令别名"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 安装 Node.js 和 npm</title>
      <link href="/posts/858e2a37/"/>
      <url>/posts/858e2a37/</url>
      
        <content type="html"><![CDATA[<h3 id="添加NodeSource到yum源"><a href="#添加NodeSource到yum源" class="headerlink" title="添加NodeSource到yum源"></a>添加NodeSource到yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -</span><br></pre></td></tr></table></figure><h3 id="安装Node-js和npm"><a href="#安装Node-js和npm" class="headerlink" title="安装Node.js和npm"></a>安装Node.js和npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure><h3 id="验证-打印安装的版本"><a href="#验证-打印安装的版本" class="headerlink" title="验证(打印安装的版本)"></a>验证(打印安装的版本)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Task 定时任务</title>
      <link href="/posts/5e9ba592/"/>
      <url>/posts/5e9ba592/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Task-定时任务"><a href="#Spring-Task-定时任务" class="headerlink" title="Spring Task 定时任务"></a>Spring Task 定时任务</h1><p>Spring Task 定时任务可通过两种方式进行配置：1、注解配置，2、XML配置</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>创建 Maven 项目，在 <code>pom.xml</code> 文件中添加 <code>spring-context</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1、通过-Scheduled注解配置方式实现定时任务"><a href="#1、通过-Scheduled注解配置方式实现定时任务" class="headerlink" title="1、通过@Scheduled注解配置方式实现定时任务"></a>1、通过@Scheduled注解配置方式实现定时任务</h2><ul><li>在 <code>src/main/resources/spring/</code> 目录下创建 <code>spring-task.xml</code> 文件，配置注解扫描和开启 <code>@Scheduled</code> 注解</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">&quot;http://www.springframework.org/schema/task&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/task/spring-task.xsd &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring 扫描注解的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;top.likeqc.springTask&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置定时任务驱动。开启这个配置，spring才能识别@Scheduled注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意定时任务需要的命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/task</span><br><span class="line">http://www.springframework.org/schema/task/spring-task.xsd</span><br></pre></td></tr></table></figure><ul><li>创建定时任务类和方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTaskDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread Name : &quot;</span></span><br><span class="line">            + Thread.currentThread().getName()</span><br><span class="line">            + <span class="string">&quot;  i am a job1(注解配置方式) : date -&gt;  &quot;</span></span><br><span class="line">            + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试定时任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;定义任务测试...&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取Spring上下文环境</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring/spring-task.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、通过XML配置方式实现定时任务"><a href="#2、通过XML配置方式实现定时任务" class="headerlink" title="2、通过XML配置方式实现定时任务"></a>2、通过XML配置方式实现定时任务</h2><ul><li>定时任务方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">job2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Thread Name : &quot;</span></span><br><span class="line">        + Thread.currentThread().getName()</span><br><span class="line">        + <span class="string">&quot;  i am a job2(XML配置方式) : date -&gt;  &quot;</span></span><br><span class="line">        + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>src/main/resources/spring/spring-task.xml</code> 文件中配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置定时规则</span></span><br><span class="line"><span class="comment">    ref：指定的类，即任务类</span></span><br><span class="line"><span class="comment">    method：指定的即需要运行的方法</span></span><br><span class="line"><span class="comment">    cron：cronExpression表达式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:scheduled-tasks</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 每隔五秒执行一次任务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">&quot;springTaskDemo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;job2&quot;</span> <span class="attr">cron</span>=<span class="string">&quot;0/5 * * * * ?&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><blockquote><p><a href="/posts/80ac0d20/">Cron 表达式</a></p></blockquote><hr><p><a href="http://likeqc.top/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cron 表达式</title>
      <link href="/posts/80ac0d20/"/>
      <url>/posts/80ac0d20/</url>
      
        <content type="html"><![CDATA[<h1 id="Cron-表达式"><a href="#Cron-表达式" class="headerlink" title="Cron 表达式"></a>Cron 表达式</h1><blockquote><p><a href="https://en.wikipedia.org/wiki/Cron">cron - Wikipedia</a></p><p><a href="https://help.aliyun.com/document_detail/64769.html">Cron表达式 (aliyun.com)</a></p></blockquote><h2 id="Cron-表达式介绍"><a href="#Cron-表达式介绍" class="headerlink" title="Cron 表达式介绍"></a>Cron 表达式介绍</h2><p>Cron 表达式是一个具有时间含义的字符串，由 5 个或 6 个空格隔开，分为 6 个或 7 个域，每个域表示不同的含义。单个域可以有多个值，使用半角<code>,</code>隔开，值可以是确定的取值，也可以是具有逻辑含义的特殊字符。</p><h2 id="域取值"><a href="#域取值" class="headerlink" title="域取值"></a>域取值</h2><table><thead><tr><th>域</th><th>是否必须</th><th>取值范围</th><th>特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>是</td><td>[0,59]</td><td><code>*</code> <code>,</code> <code>-</code> <code>/</code></td></tr><tr><td>分钟</td><td>是</td><td>[0,59]</td><td><code>*</code> <code>,</code> <code>-</code> <code>/</code></td></tr><tr><td>小时</td><td>是</td><td>[0,23]</td><td><code>*</code> <code>,</code> <code>-</code> <code>/</code></td></tr><tr><td>日期</td><td>是</td><td>[1,31]</td><td><code>*</code> <code>,</code> <code>-</code> <code>/</code> <code>?</code> <code>L</code> <code>W</code></td></tr><tr><td>月份</td><td>是</td><td>[1, 12]或[JAN, DEC]</td><td><code>*</code> <code>,</code> <code>-</code> <code>/</code></td></tr><tr><td>星期</td><td>是</td><td>[1, 7]或[MON, SUN]</td><td><code>*</code> <code>,</code> <code>-</code> <code>/</code> <code>?</code> <code>L</code> <code>#</code></td></tr><tr><td>年份</td><td>否</td><td></td><td></td></tr></tbody></table><p><em>注：月份和星期的缩写不区分大小写</em></p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table><thead><tr><th align="left">特殊字符</th><th align="left">含义</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>*</code></td><td align="left">所有可能的值。</td><td align="left">在月域中，<code>*</code>表示每个月；在星期域中，<code>*</code>表示星期的每一天。</td></tr><tr><td align="left"><code>,</code></td><td align="left">列出枚举值。</td><td align="left">在分钟域中，<code>5,20</code>表示分别在5分钟和20分钟触发一次。</td></tr><tr><td align="left"><code>-</code></td><td align="left">范围。</td><td align="left">在分钟域中，<code>5-20</code>表示从5分钟到20分钟之间每隔一分钟触发一次。</td></tr><tr><td align="left"><code>/</code></td><td align="left">指定数值的增量。</td><td align="left">在分钟域中，<code>0/15</code>表示从第0分钟开始，每15分钟。在分钟域中<code>3/20</code>表示从第3分钟开始，每20分钟。</td></tr><tr><td align="left"><code>?</code></td><td align="left">不指定值，仅日期和星期域支持该字符。</td><td align="left">当日期或星期域其中之一被指定了值以后，为了避免冲突，需要将另一个域的值设为<code>?</code>。</td></tr><tr><td align="left"><code>L</code></td><td align="left">单词Last的首字母，表示最后一天，仅日期和星期域支持该字符。<strong>说明</strong> 指定<code>L</code>字符时，避免指定列表或者范围，否则，会导致逻辑问题。</td><td align="left">在日期域中，<code>L</code>表示某个月的最后一天。在星期域中，<code>L</code>表示一个星期的最后一天，也就是星期日（<code>SUN</code>）。如果在<code>L</code>前有具体的内容，例如，在星期域中的<code>6L</code>表示这个月的最后一个星期六。</td></tr><tr><td align="left"><code>W</code></td><td align="left">除周末以外的有效工作日，在离指定日期的最近的有效工作日触发事件。<code>W</code>字符寻找最近有效工作日时不会跨过当前月份，连用字符<code>LW</code>时表示为指定月份的最后一个工作日。</td><td align="left">在日期域中<code>5W</code>，如果5日是星期六，则将在最近的工作日星期五，即4日触发。如果5日是星期天，则将在最近的工作日星期一，即6日触发；如果5日在星期一到星期五中的一天，则就在5日触发。</td></tr><tr><td align="left"><code>#</code></td><td align="left">确定每个月第几个星期几，仅星期域支持该字符。</td><td align="left">在星期域中，<code>4#2</code>表示某月的第二个星期四。</td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><table><thead><tr><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>0 15 10 ? * *</code></td><td align="left">每天上午10:15执行任务</td></tr><tr><td align="left"><code>0 15 10 * * ?</code></td><td align="left">每天上午10:15执行任务</td></tr><tr><td align="left"><code>0 0 12 * * ?</code></td><td align="left">每天中午12:00执行任务</td></tr><tr><td align="left"><code>0 0 10,14,16 * * ?</code></td><td align="left">每天上午10:00点、下午14:00以及下午16:00执行任务</td></tr><tr><td align="left"><code>0 0/30 9-17 * * ?</code></td><td align="left">每天上午09:00到下午17:00时间段内每隔半小时执行任务</td></tr><tr><td align="left"><code>0 * 14 * * ?</code></td><td align="left">每天下午14:00到下午14:59时间段内每隔1分钟执行任务</td></tr><tr><td align="left"><code>0 0-5 14 * * ?</code></td><td align="left">每天下午14:00到下午14:05时间段内每隔1分钟执行任务</td></tr><tr><td align="left"><code>0 0/5 14 * * ?</code></td><td align="left">每天下午14:00到下午14:55时间段内每隔5分钟执行任务</td></tr><tr><td align="left"><code>0 0/5 14,18 * * ?</code></td><td align="left">每天下午14:00到下午14:55、下午18:00到下午18:55时间段内每隔5分钟执行任务</td></tr><tr><td align="left"><code>0 0 12 ? * WED</code></td><td align="left">每个星期三中午12:00执行任务</td></tr><tr><td align="left"><code>0 15 10 15 * ?</code></td><td align="left">每月15日上午10:15执行任务</td></tr><tr><td align="left"><code>0 15 10 L * ?</code></td><td align="left">每月最后一日上午10:15执行任务</td></tr><tr><td align="left"><code>0 15 10 ? * 6L</code></td><td align="left">每月最后一个星期六上午10:15执行任务</td></tr><tr><td align="left"><code>0 15 10 ? * 6#3</code></td><td align="left">每月第三个星期六上午10:15执行任务</td></tr><tr><td align="left"><code>0 10,44 14 ? 3 WED</code></td><td align="left">每年3月的每个星期三下午14:10和14:44执行任务</td></tr></tbody></table><hr><p><a href="http://likeqc.top/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 自动添加作者、日期等信息</title>
      <link href="/posts/965c935d/"/>
      <url>/posts/965c935d/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-自动添加作者、日期等信息"><a href="#IDEA-自动添加作者、日期等信息" class="headerlink" title="IDEA 自动添加作者、日期等信息"></a>IDEA 自动添加作者、日期等信息</h1><p>点击 File → Settings → Editor → File and Code Templates，进入到入下图页面，输入想要的模板即可。提供几种常用的模板：</p><p><strong>风格1：官方Style</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> i@likeqc.top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>风格2：简约Style</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by i@likeqc.top on $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="http://img.likeqc.top/img/IDEA%20%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF.png" alt="image-IDEA 添加作者信息"></p><p>ps：此种方式使用与新建类时自动添加作者信息，需要在方法上添加作者信息可以<a href="https://segmentfault.com/a/1190000039700847">点击此链接</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA、Tomcat 乱码解决方法</title>
      <link href="/posts/488c3c88/"/>
      <url>/posts/488c3c88/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA、Tomcat-乱码解决方法"><a href="#IDEA、Tomcat-乱码解决方法" class="headerlink" title="IDEA、Tomcat 乱码解决方法"></a>IDEA、Tomcat 乱码解决方法</h1><h2 id="1、将IDEA-的配置全改为-UTF-8-编码"><a href="#1、将IDEA-的配置全改为-UTF-8-编码" class="headerlink" title="1、将IDEA 的配置全改为 UTF-8 编码"></a>1、将IDEA 的配置全改为 UTF-8 编码</h2><ul><li><p><code>File → Settings(快捷键 Ctrl + Alt + S) → Eidtor → File Encodings</code> 中圈出来的三个地方的编码格式都改为 UTF-8 。</p><p><img src="http://img.likeqc.top/2021/IDEA%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%BAUTF-8.png" alt="IDEA修改文件编码为UTF-8"></p></li><li><p>IDEA配置文件 添加<code>-Dfile.encoding=UTF-8</code></p><p><img src="http://img.likeqc.top/2021/IDEA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE.png"></p><p><img src="http://img.likeqc.top/2021/idea64.exe.vmoptions%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%BA%20UTF-8.png" alt="idea64.exe.vmoptions添加文件编码为 UTF-8"></p></li></ul><h2 id="2、修改Tomcat配置文件"><a href="#2、修改Tomcat配置文件" class="headerlink" title="2、修改Tomcat配置文件"></a>2、修改Tomcat配置文件</h2><ul><li><p><code>Tomcat安装目录 → conf → logging.properties</code>，全都改为 UTF-8 编码</p><p><img src="http://img.likeqc.top/2021/Tomcat%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE.png" alt="Tomcat配置文件位置"><br><img src="http://img.likeqc.top/2021/Tomcat%E4%BF%AE%E6%94%B9%E6%97%A5%E5%BF%97%E7%BC%96%E7%A0%81%E4%B8%BA%20UTF-8.png" alt="Tomcat修改日志编码为 UTF-8"></p></li><li><p>Tomcat VM options 添加 <code>-Dfile.encoding=UTF-8</code><br><img src="http://img.likeqc.top/2021/Tomcat%20VM%20options.png" alt="Tomcat VM options"></p></li></ul><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 教程 </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 修改 root 密码的方法</title>
      <link href="/posts/13e31f1f/"/>
      <url>/posts/13e31f1f/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-修改-root-密码的方法"><a href="#MySQL-修改-root-密码的方法" class="headerlink" title="MySQL 修改 root 密码的方法"></a>MySQL 修改 root 密码的方法</h1><blockquote><p><a href="https://www.runoob.com/note/38476">转载自菜鸟教程</a>，亲测可用，记下来备用</p></blockquote><ul><li><p><strong>方法1：用 SET PASSWORD 命令</strong></p><p>首先登录 MySQL（命令行或UI工具均可）</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for 用户名@localhost = password(&#x27;新密码&#x27;);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for root@localhost = password(&#x27;123&#x27;);</span><br></pre></td></tr></table></figure></li><li><p><strong>方法 2：用 mysqladmin</strong></p><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u用户名 -p旧密码 password 新密码 </span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot -p123456 password 123</span><br></pre></td></tr></table></figure></li><li><p><strong>方法 3：用 UPDATE 直接编辑 user 表</strong></p><p>例子（适用于MySQL5.7以下版本）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql; </span><br><span class="line">update user set password=password(&#x27;123&#x27;) where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;; </span><br><span class="line">flush privileges; </span><br></pre></td></tr></table></figure><p>若是<em>MySQL5.7</em>及上版本，会报错<em>“1054 - Unknown column ‘password’ in ‘field list’”</em>，原因是MySQL将<code>password</code>这个字段改为了<code>authentication_string</code>，所以对应的sql语句也需要更改。</p><p><strong>例子（MySQL5.7及上版本）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql; </span><br><span class="line">update user set authentication_string=password(&#x27;123&#x27;) where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;; </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法 4：在忘记 root 密码的时候，可以这样</strong></p><ol><li><p>以<strong>管理员权限</strong>打开CMD命令行窗口，关闭正在运行的 MySQL 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure></li><li><p>然后输入如下，意思是启动MySQL服务的时候跳过权限表认证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --skip-grant-tables</span><br></pre></td></tr></table></figure></li><li><p>以<strong>管理员权限</strong>打开一个新的CMD命令行窗口，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure></li><li><p>此时应该能够直接登录进MySQL，然后再使用<strong>方法3</strong>修改密码即可，例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql; </span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>; </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>ps：请确保已经将MySQL的路径加入到了环境变量，否者需要收到 cd 到 MySQL 的 <code>bin </code>目录下（例如我的：<code>F:\apps\mysql-5.7.33-winx64\bin</code>）运行命令。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历</title>
      <link href="/posts/ea4681d0/"/>
      <url>/posts/ea4681d0/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树遍历-先序、中序、后序"><a href="#二叉树遍历-先序、中序、后序" class="headerlink" title="二叉树遍历(先序、中序、后序)"></a>二叉树遍历(先序、中序、后序)</h1><h2 id="二叉树的节点类型"><a href="#二叉树的节点类型" class="headerlink" title="二叉树的节点类型"></a>二叉树的节点类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="comment">//左子树</span></span><br><span class="line">    TreeNode left;</span><br><span class="line">    <span class="comment">//右子树</span></span><br><span class="line">    TreeNode right;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        fun(root.left);</span><br><span class="line">        fun(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归，需要使用到栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun_2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">    TreeNode node = root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(node.val + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            stack.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><h2 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a>后续遍历</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP 协议如何保证可靠传输</title>
      <link href="/posts/1a2670e6/"/>
      <url>/posts/1a2670e6/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-协议如何保证可靠传输"><a href="#TCP-协议如何保证可靠传输" class="headerlink" title="TCP 协议如何保证可靠传输"></a>TCP 协议如何保证可靠传输</h1><p>TCP报文段头部</p><p><img src="https://i.loli.net/2021/09/28/uaHZ2NCYlR64Op9.png" alt="TCP报文段头部"></p><p><strong>TCP 保证可靠传输的方式有：校验和、序列号、超时重传、流量控制、拥塞控制。</strong></p><ul><li><p><strong>校验和</strong></p><blockquote><p>在发送和接收数据时，都会计算检验和，若不一致，说明数据在传输过程中出现了错误，则丢弃出错的数据包。</p></blockquote></li><li><p><strong>序列号</strong>和<strong>确认应答</strong></p><blockquote><p>TCP发送的每一个报文段都有序号字段，每次接收到数据后，都会对传输方发送 ACK 报文进行确认应答。接收方可以根据序列号对数据包进行排序和去重，把有序的数据传输给应用层，确认号可以告诉发送方成功接收了哪些数据以及下一次的数据从哪里开始发送。</p></blockquote></li><li><p>超时重传</p><blockquote><p>当 TCP 发出一个报文后，会启动一个定时器，如果超时还没有收到确认，发送发将重发这个报文。</p></blockquote></li><li><p>约定最大报文长度</p><blockquote><p>建立 TCP 连接时，双方约定最大报文段长度作为发送单位，理想的长度是刚好不被网络层分片。</p></blockquote></li><li><p>流量控制</p><blockquote><p>TCP 通过滑动窗口实现流量控制，窗口的大小就是发送方无需等待 ACK 的情况下还能发送的最大数据量，TCP 通过窗口大小来协调端对端的发送速度，确保接收端来得及接收，从而减少丢包。</p></blockquote></li><li><p>拥塞控制</p><ul><li><p>慢开始</p><blockquote><p>避免一开始就向网络中发送大量数据，所以 cwnd(拥塞窗口) 初始值为1，每一轮传输后翻倍。当 cwnd &gt;= ssthresh 时启动拥塞避免算法。</p></blockquote></li><li><p>拥塞避免</p><blockquote><p>慢开始阶段 cwnd 呈指数增长，拥塞避免算法的思路是设置一个门限值 ssthresh，当 cwnd &gt;= ssthresh 时启动拥塞避免算法，使 cwnd 增长速度为 1。无论是 慢开始 还是 拥塞避免 阶段出现拥塞，都把 ssthresh 设为出现拥塞时的发送窗口值的一半(最小值为2)，cwnd 值设为1，重新开始执行慢开始算法</p></blockquote></li><li><p>快重传</p><p>发送发的多个报文同时发送，若接收方收到了失序报文就会立即发送一个重复确认，发送方只要收到三个重复确认就会立即重发对方没有收到的报文段，而不是等待定时器超时重传。（及早知道丢包，及早重传）</p></li><li><p>快恢复</p><blockquote><p>发送方收到连续三个重复确认后，把 ssthresh 门限减半，cwnd 设置为 ssthresh 的大小。然后开始执行拥塞避免算法。</p></blockquote></li></ul></li></ul><p><img src="https://i.loli.net/2021/09/28/M4j29fIKegypOAT.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL2 报错 /usr/bin/env: ‘python’: No such file or directory</title>
      <link href="/posts/e460f628/"/>
      <url>/posts/e460f628/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用 WSL2 过程中遇到 “/usr/bin/env: ‘python’: No such file or directory”这样的报错，但实际上 Ubuntu 20.04 是安装了 Python3 的。</p><p>在 <a href="https://askubuntu.com/questions/942930/usr-bin-env-python-no-such-file-or-directory">windows subsystem for linux - /usr/bin/env: ‘python’: No such file or directory - Ask Ubuntu</a> 找到了解决方法。</p></blockquote><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-is-python3</span><br></pre></td></tr></table></figure><h3 id="方法2（我用的就是这种）"><a href="#方法2（我用的就是这种）" class="headerlink" title="方法2（我用的就是这种）"></a>方法2（我用的就是这种）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保安装了 Python3，如果已经安装可以不用运行这条命令</span></span><br><span class="line"><span class="comment"># apt-get install python3</span></span><br><span class="line"><span class="comment"># 查看 Python3 的位置，可能会输出多个位置，其中一个即可</span></span><br><span class="line"><span class="comment"># whereis python3</span></span><br><span class="line"><span class="comment"># 实际上我只运行了下面这一条命令</span></span><br><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>equals 与 == 比较</title>
      <link href="/posts/e8cdcce7/"/>
      <url>/posts/e8cdcce7/</url>
      
        <content type="html"><![CDATA[<h1 id="equals-与-比较"><a href="#equals-与-比较" class="headerlink" title="equals 与 == 比较"></a>equals 与 == 比较</h1><p><code>==</code> ：比较的是栈中的值，基本类型是变量值，引用类型是堆中内存对象的地址。</p><p><code>equals</code> ：在 <code>Object</code> 类中也是使用的 <code>==</code> 比较，但是其他类一般都会对该方法进行重写（重写：名称、参数列表都相同）。</p><p>Object:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String aString = (String)anObject;</span><br><span class="line">        <span class="keyword">if</span> (!COMPACT_STRINGS || <span class="keyword">this</span>.coder == aString.coder) &#123;</span><br><span class="line">            <span class="keyword">return</span> StringLatin1.equals(value, aString.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringLatin1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">byte</span>[] value, <span class="keyword">byte</span>[] other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length == other.length) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value[i] != other[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查看源码得知 <code>String.equals()</code> 的逻辑为：先进行 <code>==</code> 比较，如果指向同一个内存地址，直接返回 <code>true</code> ；否则调用 <code>StringLatin1.length()</code> 逐个比较字符数组中的字符。 </p><p>测试验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    String s2 = <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    String s3 = s2;</span><br><span class="line">    System.out.println(s1 == s2);       <span class="comment">// false</span></span><br><span class="line">    System.out.println(s1 == s3);       <span class="comment">// false</span></span><br><span class="line">    System.out.println(s2 == s3);       <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1.equals(s2));  <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1.equals(s3));  <span class="comment">// true</span></span><br><span class="line">    System.out.println(s2.equals(s3));  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git配置用户名的邮箱，全局/单仓库配置</title>
      <link href="/posts/95e6514b/"/>
      <url>/posts/95e6514b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>公司项目与个人项目用户名与邮箱有时候不一致，需要对某个项目进行单独设置。</p></blockquote><p><strong>在项目根目录下进行单仓库配置（作用域只在本仓库下）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;gitlab&#x27;s Name&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;gitlab@xx.com&quot;</span></span><br><span class="line"><span class="comment"># 查看所有配置信息</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><strong>配置全局的用户名和邮箱：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxxxx@xx.com&quot;</span></span><br><span class="line"><span class="comment"># 查看所有配置信息</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><strong>查看当前用户名/邮件配置：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看用户名配置</span></span><br><span class="line">git config user.name </span><br><span class="line"><span class="comment"># 查看当前邮件配置</span></span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><hr><p>end</p><p>by <a href="https://likeqc.top/">likeqc.top</a>  2021-9-12 11:44:11</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】浅谈控制反转与依赖注入</title>
      <link href="/posts/a7d7a63d/"/>
      <url>/posts/a7d7a63d/</url>
      
        <content type="html"><![CDATA[<blockquote><p>标题： <a href="https://zhuanlan.zhihu.com/p/33492169">浅谈控制反转与依赖注入 - 知乎 (zhihu.com)</a></p><p>作者：<a href="https://www.zhihu.com/people/hu-xiao-guo-31">胡小国 - 知乎</a></p></blockquote><hr><h2 id="第一章：小明和他的手机"><a href="#第一章：小明和他的手机" class="headerlink" title="第一章：小明和他的手机"></a>第一章：小明和他的手机</h2><p>从前有个人叫小明</p><p>小明有三大爱好，抽烟，喝酒…… 咳咳，不好意思，走错片场了。应该是逛知乎、玩王者农药和抢微信红包</p><p><img src="http://img.likeqc.top/img/v2-709d32cb3e9cdd2ead92e40c998ce077_r.jpg" alt="小明的三大爱好"></p><p>我们用一段简单的伪代码，来制造一个这样的小明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Ming extends Person</span><br><span class="line">&#123;</span><br><span class="line">    private $_name;</span><br><span class="line"></span><br><span class="line">    private $_age;</span><br><span class="line"></span><br><span class="line">    function read()</span><br><span class="line">    &#123;</span><br><span class="line">        //逛知乎</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function  play()</span><br><span class="line">    &#123;</span><br><span class="line">        //玩农药</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function  grab()</span><br><span class="line">    &#123;</span><br><span class="line">        //抢红包</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，小明作为一个人类，没有办法仅靠自己就能实现以上的功能，他必须<strong>依赖</strong>一部手机，所以他买了一台iphone6，接下来我们来制造一个iphone6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class iPhone6 extends Iphone</span><br><span class="line">&#123;</span><br><span class="line">    function read($user=&quot;某人&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $user.&quot;打开了知乎然后编了一个故事 \n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function play($user=&quot;某人&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $user.&quot;打开了王者农药并送起了人头 \n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function grab($user=&quot;某人&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $user.&quot;开始抢红包却只抢不发 \n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小明非常珍惜自己的新手机，每天把它牢牢<strong>控制</strong>在手心里，所以小明变成了这个样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Ming extends Person</span><br><span class="line">&#123;</span><br><span class="line">    private $_name;</span><br><span class="line"></span><br><span class="line">    private $_age;</span><br><span class="line"></span><br><span class="line">    public function  __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_name = &#x27;小明&#x27;;</span><br><span class="line">        $this-&gt;_age = 26;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function read()</span><br><span class="line">    &#123;</span><br><span class="line">        //……  省略若干代码</span><br><span class="line">        (new iPhone6())-&gt;read($this-&gt;_name); //逛知乎</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function  play()</span><br><span class="line">    &#123;</span><br><span class="line">        //……  省略若干代码</span><br><span class="line">        (new iPhone6())-&gt;play($this-&gt;_name);//玩农药</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function  grab()</span><br><span class="line">    &#123;</span><br><span class="line">        //……  省略若干代码</span><br><span class="line">        (new iPhone6())-&gt;grab($this-&gt;_name);//抢红包</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天是周六，小明不用上班，于是他起床，并依次逛起了知乎，玩王者农药，并抢了个红包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ming = new Ming();  //小明起床</span><br><span class="line">$ming-&gt;read();</span><br><span class="line">$ming-&gt;play();</span><br><span class="line">$ming-&gt;grab();</span><br></pre></td></tr></table></figure><p>这个时候，我们可以在命令行里看到输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小明打开了知乎然后编了一个故事 </span><br><span class="line">小明打开了王者农药并送起了人头 </span><br><span class="line">小明开始抢红包却只抢不发</span><br></pre></td></tr></table></figure><p>这一天，小明过得很充实，他觉得自己是世界上最幸福的人。</p><h2 id="第二章：-小明的快乐与忧伤"><a href="#第二章：-小明的快乐与忧伤" class="headerlink" title="第二章： 小明的快乐与忧伤"></a>第二章： 小明的快乐与忧伤</h2><p>小明和他的手机曾一起度过了一段美好的时光，一到空闲时刻，他就抱着手机，逛知乎，刷微博，玩游戏，他觉得自己根本不需要女朋友，只要有手机在身边，就满足了。</p><p>可谁能想到，一次次地系统更新彻底打碎了他的梦想，他的手机变得越来越卡顿，电池的使用寿命也越来越短，一直到某一天的寒风中，他的手机终于耐不住寒冷，头也不回地关了机。</p><p>小明很忧伤，他意识到，自己要换手机了。</p><p>为了能获得更好的使用体验，小明一咬牙，剁手了一台iphoneX，这部手机铃声很大，电量很足，还能双卡双待，小明很喜欢，但是他遇到一个问题，就是他之前过度依赖了原来那一部iPhone6，他们之间已经深深耦合在一起了，如果要换手机，他就要拿起刀来改造自己，把自己体内所有方法中的iphone6 都换成 iphoneX。</p><p><img src="http://img.likeqc.top/img/v2-e124d9d71c8400e1aab90f652f8d6bcf_720w.jpg" alt="漫长的改造过程"></p><p>经历了漫长的改造过程，小明终于把代码中的 iphone6 全部换成了 iphoneX。虽然很辛苦，但是小明觉得他是快乐的。</p><p>于是小明开开心心地带着手机去上班了，并在回来的路上被小偷偷走了。为了应急，小明只好重新使用那部刚刚被遗弃的iphone6，但是一想到那漫长的改造过程，小明的心里就说不出的委屈，他觉得自己过于<strong>依赖</strong>手机了，为什么每次手机出什么问题他都要去改造他自己，这不仅仅是<strong>过度耦合</strong>，简直是<strong>本末倒置</strong>，他向天空大喊，我不要再<strong>控制</strong>我的手机了。</p><p>天空中的造物主，也就是作为程序员的我，听到了他的呐喊，我告诉他，你不用再控制你的手机了，交给我来管理，把控制权交给我。这就叫做<strong>控制反转</strong>。</p><h2 id="第三章：造物主的智慧"><a href="#第三章：造物主的智慧" class="headerlink" title="第三章：造物主的智慧"></a>第三章：造物主的智慧</h2><p>小明听到了我的话，他既高兴，又有一点害怕，他跪下来磕了几个头，虔诚地说到：“原来您就是传说中的造物主，巴格梅克上神。我听到您刚刚说了 <strong>控制反转</strong> 四个字，就是把手机的控制权从我的手里交给你，但这只是您的想法，是一种思想罢了，要用什么办法才能实现控制反转，又可以让我继续使用手机呢？”</p><p>“呵“，身为造物主的我在表现完不屑以后，扔下了四个大字，“依赖注入！”</p><p>接下来，伟大的我开始对小明进行惨无人道的改造，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Ming extends Person</span><br><span class="line">&#123;</span><br><span class="line">    private $_name;</span><br><span class="line"></span><br><span class="line">    private $_age;</span><br><span class="line"></span><br><span class="line">    private $_phone; //将手机作为自己的成员变量</span><br><span class="line"></span><br><span class="line">    public function  __construct($phone)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_name = &#x27;小明&#x27;;</span><br><span class="line">        $this-&gt;_age = 26;</span><br><span class="line">        $this-&gt;_phone = $phone;</span><br><span class="line">        echo &quot;小明起床了 \n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function read()</span><br><span class="line">    &#123;</span><br><span class="line">        //……  省略若干代码</span><br><span class="line">        $this-&gt;_phone-&gt;read($this-&gt;_name); //逛知乎</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function  play()</span><br><span class="line">    &#123;</span><br><span class="line">        //……  省略若干代码</span><br><span class="line">        $this-&gt;_phone-&gt;play($this-&gt;_name);//玩农药</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function  grab()</span><br><span class="line">    &#123;</span><br><span class="line">        //……  省略若干代码</span><br><span class="line">        $this-&gt;_phone-&gt;grab($this-&gt;_name);//抢红包</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们来模拟运行小明的一天</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$phone = new IphoneX(); //创建一个iphoneX的实例</span><br><span class="line">if($phone-&gt;isBroken())&#123;//如果iphone不可用，则使用旧版手机</span><br><span class="line">    $phone = new Iphone6();</span><br><span class="line">&#125;</span><br><span class="line">$ming = new Ming($phone);//小明不用关心是什么手机，他只要玩就行了。</span><br><span class="line">$ming-&gt;read();</span><br><span class="line">$ming-&gt;play();</span><br><span class="line">$ming-&gt;grab();</span><br></pre></td></tr></table></figure><p>我们先看一下iphoneX 是否可以使用，如果不可以使用，则直接换成iphone6,然后唤醒小明，并把手机塞到他的手里，换句话说，把他所依赖的手机直接注入到他的身上，他不需要关心自己拿的是什么手机，他只要直接使用就可以了。</p><p>这就是<strong>依赖注入</strong>。</p><h2 id="第四章：小明的感悟"><a href="#第四章：小明的感悟" class="headerlink" title="第四章：小明的感悟"></a>第四章：小明的感悟</h2><p>小明的生活开始变得简单了起来，而他把省出来的时间都用来写笔记了，他在笔记本上这样写到</p><blockquote><p>我曾经有很强的控制欲，过度依赖于我的手机，导致我和手机之间耦合程度太高，只要手机出现一点点问题，我都要改造我自己，这实在是既浪费时间又容易出问题。自从我把控制权交给了造物主，他每天在唤醒我以前，就已经替我选好了手机，我只要按照平时一样玩手机就可以了，根本不用关心是什么手机。即便手机出了问题，也可以由造物主直接搞定，不需要再改造我自己了，我现在买了七部手机，都交给了造物主，每天换一部，美滋滋！<br><strong>我也从其中获得了这样的感悟：</strong> 如果一个类A 的功能实现需要借助于类B，那么就称类B是类A的<strong>依赖</strong>，如果在类A的内部去实例化类B，那么两者之间会出现较高的<strong>耦合</strong>，一旦类B出现了问题，类A也需要进行改造，如果这样的情况较多，每个类之间都有很多依赖，那么就会出现牵一发而动全身的情况，<strong>程序会极难维护</strong>，并且很容易出现问题。要解决这个问题，就要把A类对B类的控制权抽离出来，交给一个第三方去做，把控制权反转给第三方，就称作<strong>控制反转（IOC Inversion Of Control）</strong>。<strong>控制反转是一种思想</strong>，是能够解决问题的一种可能的结果，而<strong>依赖注入（Dependency Injection）</strong>就是其最典型的实现方法。由第三方（<strong>我们称作IOC容器</strong>）来控制依赖，把他通过<strong>构造函数、属性或者工厂模式</strong>等方法，注入到类A内，这样就极大程度的对类A和类B进行了<strong>解耦</strong>。</p></blockquote><h2 id="第五章-小明的困惑"><a href="#第五章-小明的困惑" class="headerlink" title="第五章 小明的困惑"></a>第五章 小明的困惑</h2><p>有一天，小明发现自己在想阅读知乎的时候，读到了这样一行文字。</p><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 控制反转(IoC) </tag>
            
            <tag> 依赖注入(DI) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ECS快速搭建Docker环境</title>
      <link href="/posts/d7aeaffc/"/>
      <url>/posts/d7aeaffc/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装Docker-CE"><a href="#1-安装Docker-CE" class="headerlink" title="1. 安装Docker CE"></a>1. 安装Docker CE</h2><ol><li><p>安装Docker的依赖库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>添加Docker CE的软件源信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装Docker CE。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>启动Docker服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-配置阿里云镜像仓库（镜像加速）"><a href="#2-配置阿里云镜像仓库（镜像加速）" class="headerlink" title="2. 配置阿里云镜像仓库（镜像加速）"></a>2. 配置阿里云镜像仓库（镜像加速）</h2><p><a href="https://cr.console.aliyun.com/cn-chengdu/instances/mirrors">容器镜像服务 (aliyun.com)</a> &gt; 镜像中心 &gt; 镜像加速器</p><p><img src="http://img.likeqc.top/img/image-20210726102130363.png" alt="image-20210726102130363"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://4zkl****.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="3-使用Docker安装Nginx服务"><a href="#3-使用Docker安装Nginx服务" class="headerlink" title="3. 使用Docker安装Nginx服务"></a>3. 使用Docker安装Nginx服务</h2><ol><li><p>查看Docker镜像仓库中Nginx的可用版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure></li><li><p>拉取最新版的Nginx镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure></li><li><p>查看本地镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>运行容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-test -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>命令参数说明：</p><ul><li>–name nginx-test：容器名称。</li><li>-p 8080:80： 端口进行映射，将本地8080端口映射到容器内部的80端口。</li><li>-d nginx： 设置容器在后台一直运行。</li></ul></blockquote></li><li><p>在浏览器地址栏输入http://&lt;ECS公网IP地址&gt;:8080访问Nginx服务。</p></li></ol><p><img src="http://img.likeqc.top/img/image-20210726102747727.png" alt="image-20210726102747727"></p><h2 id="4-设置Docker服务和容器自启动"><a href="#4-设置Docker服务和容器自启动" class="headerlink" title="4. 设置Docker服务和容器自启动"></a>4. 设置Docker服务和容器自启动</h2><ul><li><p>Docker服务自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker#docker 服务自启动</span><br><span class="line">service docker start#启动 docker</span><br><span class="line">service docker stop#停止 docker</span><br><span class="line">service docker restart#重启 docker</span><br></pre></td></tr></table></figure></li><li><p>Docker容器自启动</p><p>创建容器时在 docker run 指令中加入 <code>--restart=always</code> 就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --restart=always xxx</span><br></pre></td></tr></table></figure><p>如果创建时未指定 <code>--restart=always</code> ,可通过 <code>docker update</code> 命令设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always xxx</span><br></pre></td></tr></table></figure><p>``–restart` 参数的几个选择</p><table><thead><tr><th>no</th><th>无论什么情况，都不要重启容器</th></tr></thead><tbody><tr><td>on-failure</td><td>当容器的主进程以非正常状态退出时重启（退出码非 0）</td></tr><tr><td>always</td><td>无论什么情况，只要容器没运行，就重启</td></tr><tr><td>unless-stopped</td><td>和 always 差不多，但是如果时被主动 stop 掉或者 Docker 重新启动后这两种情况都不会重启</td></tr></tbody></table></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github拉取仓库太慢？git设置和取消代理</title>
      <link href="/posts/843e0018/"/>
      <url>/posts/843e0018/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：<a href="https://gist.github.com/laispace/666dd7b27e9116faece6">git 设置和取消代理 (github.com)</a></p></blockquote><p>拉取 <a href="https://github.com/likeqc">github</a> 上面的仓库时，速度总是非常的慢，通过设置代理即可解决该问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 协议、ip、端口根据实际情况更改</span><br><span class="line"># 临时代理，只针对当前窗口（推荐）</span><br><span class="line">export ALL_PROXY=socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"># 配置代理（gitbash环境下加不加单双引号都可以，生成的配置文件都一样）</span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"># 查看代理的不同方式</span><br><span class="line">git config --global -e</span><br><span class="line">git config --global --list</span><br><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br><span class="line"></span><br><span class="line"># 清除代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br><span class="line"># 测试是否走代理（此种方式测试无法证明没有走代理，实测上述方法中只有临时配置生效，而全局配置方式Timeout，但实际clone仓库时都走的代理）</span><br><span class="line">curl www.google.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理前后速度对比（速度感人）：</p><p><img src="http://img.likeqc.top/img/%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E5%92%8C%E4%B8%8D%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86git%E9%80%9F%E5%BA%A6%E5%AF%B9%E6%AF%94.gif" alt="配置代理和不配置代理git速度对比"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Lombok的@Data注解时，指定某字段不加入到toString</title>
      <link href="/posts/4487daf7/"/>
      <url>/posts/4487daf7/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://segmentfault.com/q/1010000017412280">JAVA Lombok 使用@Data时，如何指定字段不加入到toString</a></p></blockquote><p><img src="http://img.likeqc.top/img/Lombok.svg"></p><p><em>刚刚遇到一个bug，经过断点调试发现问题出在一条输出语句上，该语句输出的是一个对象，调用了对象的 toString() 方法，而我的 pojo 类统一使用的 <a href="https://projectlombok.org/">Lombok</a> 的 @Data 注解自动生成 getter，settet 和 toString 方法。恰好我的 pojo 中某些属性是没有 toString() 方法的，写的时候没有注意到，所以我需要指定特定字段不要加入到 toString() 方法中。</em></p><h4 id="ToString-Exclude"><a href="#ToString-Exclude" class="headerlink" title="@ToString.Exclude"></a>@ToString.Exclude</h4><p>该注解加可以在某一个属性上，表示该属性不加到 toString() 方法中。</p><h4 id="ToString-exclude-“属性1”-“属性2”"><a href="#ToString-exclude-“属性1”-“属性2”" class="headerlink" title="@ToString(exclude = {“属性1”, “属性2”})"></a>@ToString(exclude = {“属性1”, “属性2”})</h4><p>加在类上， 参数 exclude 是一个 String 数组，可以排除指定的属性不加入到  toString() 方法中。</p><h4 id="Getter-AccessLevel-NONE-amp-Setter-AccessLevel-NONE"><a href="#Getter-AccessLevel-NONE-amp-Setter-AccessLevel-NONE" class="headerlink" title="@Getter(AccessLevel.NONE) &amp;@Setter(AccessLevel.NONE)"></a>@Getter(AccessLevel.NONE) &amp;@Setter(AccessLevel.NONE)</h4><p>加在属性上，表示不生成 getter，setter 方法。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombok </tag>
            
            <tag> bug日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis解决key乱码问题</title>
      <link href="/posts/7894bc3b/"/>
      <url>/posts/7894bc3b/</url>
      
        <content type="html"><![CDATA[<h1 id="redis乱码"><a href="#redis乱码" class="headerlink" title="redis乱码"></a>redis乱码</h1><p>在项目中使用redis保存数据时，发现 key 和 value 前面都有一串16进制的乱码</p><p><img src="http://img.likeqc.top/img/image-20210405164824625.png" alt="image-20210405164824625"></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p><code>RedisTemplate</code>源码如下，可以看出默认使用的是**<code>JdkSerializationRedisSerializer</code>**进行序列化，造成乱码问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> RedisSerializer keySerializer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> RedisSerializer valueSerializer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> RedisSerializer hashKeySerializer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> RedisSerializer hashValueSerializer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> RedisSerializer&lt;String&gt; stringSerializer = RedisSerializer.string();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码。。。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (defaultSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">defaultSerializer = <span class="keyword">new</span> JdkSerializationRedisSerializer(</span><br><span class="line">classLoader != <span class="keyword">null</span> ? classLoader : <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (enableDefaultSerializer) &#123;</span><br><span class="line"><span class="keyword">if</span> (keySerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">keySerializer = defaultSerializer;</span><br><span class="line">defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (valueSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">valueSerializer = defaultSerializer;</span><br><span class="line">defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hashKeySerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">hashKeySerializer = defaultSerializer;</span><br><span class="line">defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hashValueSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">hashValueSerializer = defaultSerializer;</span><br><span class="line">defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="1、优雅的解决方法"><a href="#1、优雅的解决方法" class="headerlink" title="1、优雅的解决方法"></a>1、优雅的解决方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">// private RedisTemplate redisTemplate;</span></span><br><span class="line">StringRedisTemplate redisTemplate; <span class="comment">// 优雅地解决Redis乱码问题</span></span><br></pre></td></tr></table></figure><p><code>StringRedisTemplate</code>类的声明如下，就相当于<code>RedisTemplate&lt;String, String&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class StringRedisTemplate extends RedisTemplate&lt;String, String&gt;</span><br></pre></td></tr></table></figure><h2 id="2、设置序列化方式"><a href="#2、设置序列化方式" class="headerlink" title="2、设置序列化方式"></a>2、设置序列化方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决Redis乱码问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">    RedisSerializer stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">    redisTemplate.setKeySerializer(stringSerializer);</span><br><span class="line">    redisTemplate.setValueSerializer(stringSerializer);</span><br><span class="line">    redisTemplate.setHashKeySerializer(stringSerializer);</span><br><span class="line">    redisTemplate.setHashValueSerializer(stringSerializer);</span><br><span class="line">    <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第8-16行使用<code>@Autowired</code>标注了<code>setRedisTemplate</code>方法，项目启动的时候会调用该方法，为<code>redisTemplate</code>对象设置了序列化方法。</p><h2 id="3、配置类（示例代码使用的Jackson2JsonRedisSerializer）"><a href="#3、配置类（示例代码使用的Jackson2JsonRedisSerializer）" class="headerlink" title="3、配置类（示例代码使用的Jackson2JsonRedisSerializer）"></a>3、配置类（示例代码使用的Jackson2JsonRedisSerializer）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate redisTemplate = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer =</span><br><span class="line">                <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 设置完这个可以直接将对象以json格式存入redis中，但是取出来的时候要用JSON.parseArray(Json.toJsonString(object),Object.class)解析一下</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 调用后完成设置</span></span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 乱码 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PairWise算法 JAVA实现</title>
      <link href="/posts/7839fb46/"/>
      <url>/posts/7839fb46/</url>
      
        <content type="html"><![CDATA[<p>PairWise算法，基本思想是每一个测试用例至少会出现一个新的二元组（我瞎编的名词，懂得起我的意思即可），举个栗子：</p><p><img src="http://img.likeqc.top/img/image-20210404205926491.png" alt="image-20210404205926491"></p><p>上图中A,B,C列表示他们的取值，每一行表示一个测试用例，深色标记的测试用例即为不符合PairWise的用例。以第24个测试用例举例，它有“23”,“24”,“34”共三个二元组，但第21、第16、第12个个测试用例中都已经出现过，所以没有出现新的二元组，不符合PairWise方法。</p><p>JAVA实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PairWise（成对）测试方法</span></span><br><span class="line"><span class="comment"> * author: likeqc</span></span><br><span class="line"><span class="comment"> * date: 2021-4-4 11:06:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PairWise</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PairWise方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str String[][]，二维数组，一维数组 str[i] 中存放第 i 个因素的因子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solution</span><span class="params">(String[][] str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 传统方式测试用例数量</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 符合要求的测试用例数量</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i].length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输出的数据错误！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum *= str[i].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] one = <span class="keyword">new</span> <span class="keyword">int</span>[str.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">            <span class="comment">// 创造一个新的测试用例（传统方法，暴力所有可能的测试用例）</span></span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = str.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                one[j] = (one[j] + carry) % str[j].length;</span><br><span class="line">                <span class="keyword">if</span> (carry == <span class="number">1</span> &amp;&amp; one[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    carry = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    carry = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 测试该测试用例是否能够产生新的配对组</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str.length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; str.length; k++) &#123;</span><br><span class="line">                    String key = j + <span class="string">&quot;_&quot;</span> + str[j][one[j]] + <span class="string">&quot;,&quot;</span> + k + <span class="string">&quot;_&quot;</span> + str[k][one[k]];</span><br><span class="line">                    <span class="comment">// System.out.println(key);</span></span><br><span class="line">                    <span class="keyword">if</span> (hashMap.get(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="comment">// System.out.println(&quot;新的key：&quot; + key);</span></span><br><span class="line">                        hashMap.put(key, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 产生了新的配对组，说明该用例符合 PairWise 规则，输出</span></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.print(<span class="string">&quot;测试用例&quot;</span> + count + <span class="string">&quot;：&quot;</span> + str[<span class="number">0</span>][one[<span class="number">0</span>]]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; str.length; j++) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;,&quot;</span> + str[j][one[j]]);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;PairWise方法测试用用例：&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;传统方法测试用用例：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> String[][]&#123;&#123;<span class="string">&quot;T&quot;</span>, <span class="string">&quot;F&quot;</span>&#125;, &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;, &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十二届蓝桥杯大赛模拟赛（第三期）题目与解答</title>
      <link href="/posts/5e9e8135/"/>
      <url>/posts/5e9e8135/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　ASCII 码将每个字符对应到一个数值（编码），用于信息的表示和传输。在 ASCII 码中，英文字母是按从小到大的顺序依次编码的，例如：字母 A 编码是 65, 字母 B 编码是 66，字母 C 编码是 67，请问字母 Q 编码是多少？</p><h6 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ASCII码与整型互转</span><br></pre></td></tr></table></figure><h6 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">81</span><br></pre></td></tr></table></figure><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><h6 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　请问在 1 到 2020 中，有多少个数与 2020 互质，即有多少个数与 2020 的最大公约数为 1。</p><h6 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h6 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = a;</span><br><span class="line">            a = b % a;</span><br><span class="line">            b = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2020</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gcd(i, <span class="number">2020</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="答案：-1"><a href="#答案：-1" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">800</span><br></pre></td></tr></table></figure><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><h6 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　有一棵二叉树，一个由2021个结点，其中有1000个结点有两个子结点，其他的结点有一个或者0个子结点。<br>　　请问，这棵二叉树有多少个叶结点？</p><h6 id="答案提交-2"><a href="#答案提交-2" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h6 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">已知：node = 2021，node_2 = 1000， 求node_0 = ? (注：node_1表示只有一个子节点的节点)</span><br><span class="line">node = 2021 ==&gt; edge = node - 1 = 2020; (除root节点外，所有节点都有一条指向父节点的边)</span><br><span class="line">node_2 = 1000 ==&gt; edge_2 = node_2 * 2 = 2000;</span><br><span class="line">node_1 = edge_1 = edge - edge_2 = 2020 - 2000 = 20;</span><br><span class="line">node_0 = node - node_2 - node_1 = 2021 - 1000 - 20 = 1001;</span><br></pre></td></tr></table></figure><h6 id="答案：-2"><a href="#答案：-2" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001</span><br></pre></td></tr></table></figure><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><h6 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　对于整数 v 和 p，定义 Pierce 序列为：<br>　　a[1] = v<br>　　a[i] = p % a[i-1]<br>　　例如，当 v = 8, p = 21 时，对应的 Pierce 序列为<br>　　a[1] = 8<br>　　a[2] = 5<br>　　a[3] = 1<br>　　再往后计算，值变为 0，不在我们考虑的范围内。因此当 v = 8, p = 21 时， Pierce 序列的长度为 3。<br> 　　当 p 一定时，对于不同的 v 值，Pierce 序列的长度可能不同。当 p = 8 时，若 1&lt;=v&lt;p，最长的 Pierce 序列出现在 v=13时，为(13, 8, 5, 1)，长度为 4。<br> 　　当 p=2021 时，最长的 Pierce 序列出现在 v=1160 时，请问这个序列有多长？</p><h6 id="答案提交-3"><a href="#答案提交-3" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h6 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Fibonacci数列的变种，题目中的第二个例子有问题，无视即可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> p = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>; <span class="comment">// for a[1]</span></span><br><span class="line">        <span class="keyword">int</span> last = v; <span class="comment">// last is a[i-1]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(last);</span></span><br><span class="line">        <span class="keyword">while</span> (last != <span class="number">1</span> &amp;&amp; last != <span class="number">0</span>) &#123;</span><br><span class="line">            last = p % last;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// System.out.println(last);</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="答案：-3"><a href="#答案：-3" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><h6 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　在 Excel 中，第 1 列到第 26 列的列名依次为 A 到 Z，从第 27 列开始，列名有两个字母组成，第 27 列到第 702 列的列名依次为 AA 到 ZZ。<br> 　　之后的列再用 3 个字母、4 个字母表示。<br> 　　请问，第 2021 列的列名是什么？</p><h6 id="答案提交-4"><a href="#答案提交-4" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个有大写字母组成的字符串，在提交答案时只填写这个字符串，填写多余的内容将无法得分。</p><h6 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 进制转换（十进制转为26进制）</span><br><span class="line">// Integer封装了进制转换的方法 Integer.toString(i, radix)</span><br><span class="line">// 但表示方法是 0123456789 abcdefghijklmnopqrstuvwxyz，可以通过该方法求1-36范围的进制转换</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    char[] chars = Integer.toString(2021, 26).toCharArray();</span><br><span class="line">    for (char c : chars) &#123;</span><br><span class="line">        char cc;</span><br><span class="line">        if (c &lt;= &#x27;9&#x27;) &#123;</span><br><span class="line">            cc = (char) (c - &#x27;0&#x27; - 1 + &#x27;A&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cc = (char) (c - &#x27;a&#x27; - 1 + &#x27;A&#x27; + 10);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(cc);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="答案：-4"><a href="#答案：-4" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BYS</span><br></pre></td></tr></table></figure><h2 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h2><h6 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　在书写一个较大的整数时，为了方便看清数位，通常会在数位之间加上逗号来分割数位，具体的，从右向左，每三位分成一段，相邻的段之间加一个逗号。<br> 　　例如，1234567 写成 1,234,567。<br> 　　例如，17179869184 写成 17,179,869,184。<br> 　　给定一个整数，请将这个整数增加分割符后输出。</p><h6 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入一行包含一个整数 v。</p><h6 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出增加分割符后的整数。</p><h6 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567</span><br></pre></td></tr></table></figure><h6 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,234,567</span><br></pre></td></tr></table></figure><h6 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17179869184</span><br></pre></td></tr></table></figure><h6 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17,179,869,184</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于 50% 的评测用例，0 &lt;= v &lt; 10^9 (10的9次方)。<br>　　对于所有评测用例，0 &lt;= v &lt; 10^18 (10的18次方)。</p><h6 id="答案：-5"><a href="#答案：-5" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    String s = sc.next();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        sb.append(s.charAt(s.length() - i - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; (i + <span class="number">1</span>) &lt; s.length()) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sb.reverse().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h2><h6 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　小蓝正在写一个网页显示一个新闻列表，他需要将总共 n 条新闻显示，每页最多可以显示 p 条，请问小蓝至少需要分多少页显示？<br>　　例如，如果要显示2021条新闻，每页最多显示10条，则至少要分203页显示。</p><h6 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入的第一行包含一个整数 n，表示要显示的新闻条数。<br> 　　第二行包含一个整数 p，表示每页最多可以显示的条数。</p><h6 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出一个整数，表示答案。</p><h6 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h6 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">203</span><br></pre></td></tr></table></figure><h6 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h6 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">101</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定-1"><a href="#数据规模和约定-1" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于所有评测用例，1 &lt;= n &lt;= 10000，1 &lt;= p &lt;= 100。</p><h6 id="答案：-6"><a href="#答案：-6" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> p = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> x = n / p + (n % p == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h2><h6 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　杂货铺老板一共有N件物品，每件物品具有ABC三种属性中的一种或多种。从杂货铺老板处购得一件物品需要支付相应的代价。<br>　　现在你需要计算出如何购买物品，可以使得ABC三种属性中的每一种都在至少一件购买的物品中出现，并且支付的总代价最小。</p><h6 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入第一行包含一个整数N。<br>　　以下N行，每行包含一个整数C和一个只包含”ABC”的字符串，代表购得该物品的代价和其具有的属性。</p><h6 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出一个整数，代表最小的代价。如果无论如何凑不齐ABC三种属性，输出-1。</p><h6 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 A</span><br><span class="line">9 BC</span><br><span class="line">11 CA</span><br><span class="line">4 A</span><br><span class="line">5 B</span><br></pre></td></tr></table></figure><h6 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定-2"><a href="#数据规模和约定-2" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于50%的评测用例，1 &lt;= N &lt;= 20<br>　　对于所有评测用例，1 &lt;= N &lt;= 1000， 1 &lt;= C &lt;= 100000</p><h6 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造一个hash表，分别存放A、B、C、AB、AC、BC、ABC对应的最低代价，最后遍历A+B+C、AB+C、AC+b、BC+A、ABC这四种情况找出最小代价即可。</span><br></pre></td></tr></table></figure><h6 id="答案：-7"><a href="#答案：-7" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MAX_INT = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span>[] weight = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        weight[i] = MAX_INT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p = sc.nextInt();</span><br><span class="line">        s = sc.next();</span><br><span class="line">        <span class="comment">// System.out.println(p + &quot;--&quot; + s);</span></span><br><span class="line">        <span class="keyword">if</span> (weight[getIndex(s)] &gt; p) &#123;</span><br><span class="line">            weight[getIndex(s)] = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = MAX_INT;</span><br><span class="line">    result = Math.min(result, weight[getIndex(<span class="string">&quot;ABC&quot;</span>)]);</span><br><span class="line">    result = Math.min(result, (weight[getIndex(<span class="string">&quot;AB&quot;</span>)] + weight[getIndex(<span class="string">&quot;C&quot;</span>)]));</span><br><span class="line">    result = Math.min(result, (weight[getIndex(<span class="string">&quot;BC&quot;</span>)] + weight[getIndex(<span class="string">&quot;A&quot;</span>)]));</span><br><span class="line">    result = Math.min(result, (weight[getIndex(<span class="string">&quot;AC&quot;</span>)] + weight[getIndex(<span class="string">&quot;B&quot;</span>)]));</span><br><span class="line">    result = Math.min(result, (weight[getIndex(<span class="string">&quot;A&quot;</span>)] + weight[getIndex(<span class="string">&quot;B&quot;</span>)] + weight[getIndex(<span class="string">&quot;C&quot;</span>)]));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// A = 1, B = 2, C = 4</span></span><br><span class="line">    <span class="comment">// AB = 3, AC = 5, BC = 6</span></span><br><span class="line">    <span class="comment">// ABC = 7</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> containA = <span class="number">0</span>, containB = <span class="number">0</span>, containC = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.contains(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">        containA = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.contains(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">        containB = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.contains(<span class="string">&quot;C&quot;</span>)) &#123;</span><br><span class="line">        containC = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (containA + containB + containC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h2><h6 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　给定一个矩阵 M，由 n 行 m 列组成，第 i 行第 j 列值为 M[i][j]。<br>　　定义矩阵 M 的重量为矩阵中所有元素的和，几位weight(M)<br>　　请找到矩阵左上角的一个子矩阵S（矩阵的前 r 行中的前 c 列组成），使得这个子矩阵的重量的两倍最接近矩阵 M 重量。即 |2 weight(S)-weight(M)| 最小。<br> 　　如果有多个子矩阵满足条件，请找出面积 r * c 最小的一个。<br> 　　如果仍然有多个子矩阵满足条件，请找出其中 r 最小的一个。</p><h6 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入第一行包含两个整数 n, m，表示矩阵的大小。<br>　　接下来 n 行，每行 m 个整数，表示给定的矩阵M。</p><h6 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出一行，包含两个整数 r, c，表示子矩阵为矩阵 M 的前 r 行中的前 c 列。</p><h6 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">3 0 1 1</span><br><span class="line">1 0 1 1</span><br><span class="line">1 1 -2 4</span><br></pre></td></tr></table></figure><h6 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定-3"><a href="#数据规模和约定-3" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于 30% 的评测用例，1 &lt;= n, m &lt;= 20, -10 &lt;= M[i][j] &lt;= 10。<br>　　对于 50% 的评测用例，1 &lt;= n, m &lt;= 100, -100 &lt;= M[i][j] &lt;= 100。<br>　　对于所有评测用例，1 &lt;= n, m &lt;= 1000, -1000 &lt;= M[i][j] &lt;= 1000。</p><h6 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先求出i行j列的重量并保存在weight[i][j]数组中，然后遍历该数组找出符合要求的 r、c</span><br></pre></td></tr></table></figure><h6 id="答案：-8"><a href="#答案：-8" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span>[][] M = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span>[][] weight = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    n = sc.nextInt();</span><br><span class="line">    m = sc.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            M[i][j] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> jWeight = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= i; k++) &#123;</span><br><span class="line">                jWeight += M[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">            weight[i][j] = weight[i][j - <span class="number">1</span>] + jWeight;</span><br><span class="line">            <span class="comment">// System.out.println(weight[i][j] + &quot;---&quot; + jWeight);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>, flag = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = Math.abs(<span class="number">2</span> * weight[i][j] - weight[n][m]);</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; flag) &#123;</span><br><span class="line">                flag = temp;</span><br><span class="line">                r = i;</span><br><span class="line">                c = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp == flag &amp;&amp; (i * j) &lt; (r * c)) &#123;</span><br><span class="line">                r = i;</span><br><span class="line">                c = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp == flag &amp;&amp; (i * j) == (r * c) &amp;&amp; (i &lt; r)) &#123;</span><br><span class="line">                r = i;</span><br><span class="line">                c = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(r + <span class="string">&quot; &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><h6 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　给定一个序列 (a_1, a_2, …, a_n), 它的一个上升子序列是指从序列中取出一些元素，按照原来的顺序排列后，是单调递增的序列。<br>　　例如，对于序列 (3, 2, 7, 6, 7)，取出下标为 2, 4, 5 的元素 a_2, a_4, a_5，即 2, 6, 7，是一个上升子序列。<br>　　在这个序列中，有 7 个长度为 2 的上升子序列，例如</p><pre><code>    1. 下标 1, 3 对应的 3, 7；    2. 下标 1, 4 对应的 3, 6；    3. 下标 1, 5 对应的 3, 7；    4. 下标 2, 3 对应的 2, 7；    5. 下标 2, 4 对应的 2, 6；    6. 下标 2, 5 对应的 2, 7；    7. 下标 4, 5 对应的 6, 7。</code></pre><p> 　　注意，可能有下标不同但对应数值相同的上升子序列，他们应当算成不同的上升子序列。<br> 　　给定序列，请问序列中一共有多少个长度为 k 的上升子序列。</p><h6 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入第一行包含两个整数 n, k，表示序列的长度和上升子序列的长度。<br>　　第二行包含 n 个整数 a_1, a_2, …, a_n，表示给定的序列。</p><h6 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出一行，包含一个整数，表示长度为 k 的上升子序列的数量，答案可能很大，请输出答案除以 1000007 的余数。</p><h6 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">3 2 7 6 7</span><br></pre></td></tr></table></figure><h6 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定-4"><a href="#数据规模和约定-4" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于 30% 的评测用例，1 &lt;= n &lt;= 20, 0 &lt;= a_i &lt;= 100。<br>　　对于 50% 的评测用例，1 &lt;= n &lt;= 100, 0 &lt;= a_i &lt;= 1000。<br>　　对于所有评测用例，1 &lt;= n &lt;= 1000, 1 &lt;= k &lt;= 10, 0 &lt;= a_i &lt;= 10000。</p><h6 id="答案（暴力递归）："><a href="#答案（暴力递归）：" class="headerlink" title="答案（暴力递归）："></a>答案（暴力递归）：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        array[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    f(array, <span class="number">0</span>, Integer.MIN_VALUE, <span class="number">1</span>, k);</span><br><span class="line">    System.out.println(count % <span class="number">1000007</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> aim, <span class="keyword">int</span> kth, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kth &gt; len) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;finded!&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; array.length - (len - kth); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; aim) &#123;</span><br><span class="line">            f(array, i + <span class="number">1</span>, array[i], kth + <span class="number">1</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="思路（动态规划）"><a href="#思路（动态规划）" class="headerlink" title="思路（动态规划）"></a>思路（动态规划）</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]表示以array[i]结尾，长度为j的上升子序列的数量，状态转移方程如下：</span><br><span class="line">dp[i][1] = 1</span><br><span class="line">dp[i][j] = sum(dp[i][j - 1]), (0 &lt;= t &lt; i &amp;&amp; array[t] &lt; array[i])</span><br><span class="line"></span><br><span class="line">输出结果为： sum(dp[i][k]), (0 &lt;= i &lt; n)</span><br></pre></td></tr></table></figure><h6 id="答案（动态规划）："><a href="#答案（动态规划）：" class="headerlink" title="答案（动态规划）："></a>答案（动态规划）：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="number">1000007</span>;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        array[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][k + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= k; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; i; t++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[t] &lt; array[i]) &#123;</span><br><span class="line">                    sum += dp[t][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][j] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count += dp[i][k];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议可靠传输、流量控制、拥塞控制</title>
      <link href="/posts/cb437a6d/"/>
      <url>/posts/cb437a6d/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="1、可靠传输"><a href="#1、可靠传输" class="headerlink" title="1、可靠传输"></a>1、可靠传输</h2><h3 id="1-1、停止等待协议（自动重传请求AQR（Automatic-Repeat-reQuest））"><a href="#1-1、停止等待协议（自动重传请求AQR（Automatic-Repeat-reQuest））" class="headerlink" title="1.1、停止等待协议（自动重传请求AQR（Automatic Repeat reQuest））"></a>1.1、停止等待协议（自动重传请求AQR（Automatic Repeat reQuest））</h3><p>每发送完一个分组就停止发送，等待对方的确认，收到确认后再发送下一个分组。</p><p><code>超时重传</code>：每发送一个分组时设置一个超时计时器，同时保留已发送分组的副本，若超时计时器到期任未收到确认，则重传。</p><p><code>确认丢失</code>：若接收方返回给发送方的确认在网络中丢失了，那么发送方无法知道自己发送的分组是出错、丢失，还是确认丢失，所以发送方会<code>超时重传</code></p><p><code>确认迟到</code>：什么也不做</p><h3 id="1-2、连续ARQ协议"><a href="#1-2、连续ARQ协议" class="headerlink" title="1.2、连续ARQ协议"></a>1.2、连续ARQ协议</h3><p>一次性发送多个分组。接收方一般采用累计确认的方式，即只对<code>按序到达</code>的最后一个分组发送确认，表示到这个分组为止的所有分组都已正确收到。当多个分组中的某一个分组丢失时，发送方需要重传丢失分组及后面的所有分组（<code>回退N</code>）。</p><h3 id="1-3、选择确认SACK"><a href="#1-3、选择确认SACK" class="headerlink" title="1.3、选择确认SACK"></a>1.3、选择确认SACK</h3><p>若收到的报文段无差错，只是未按序号，中间还缺少一些序号的数据，<strong>选择确认SACK</strong>能够只传送缺少的数据而不重传已经正确到达接收方的数据。</p><h2 id="2、流量控制"><a href="#2、流量控制" class="headerlink" title="2、流量控制"></a>2、流量控制</h2><p>让发送方的发送速率不要太快，要让接收方来得及接收。</p><p>发送方的发送窗口不过能超过接收方给出的接收窗口的大小。接收窗口的大小是动态的，接收方会在确认报文中的窗口字段动态更新接收窗口的大小。<strong>当接收窗口的大小为0时</strong>，发送方<strong>停止发送</strong>数据，同时启动一个定时器，若定时器超时仍没有收到接收方的非零窗口通知（因为通知可能中途丢失，若一致等待可能造成死锁），则<strong>发送测试报文主动询问</strong>。</p><h2 id="3、拥塞控制"><a href="#3、拥塞控制" class="headerlink" title="3、拥塞控制"></a>3、拥塞控制</h2><h3 id="3-1、慢开始和拥塞避免"><a href="#3-1、慢开始和拥塞避免" class="headerlink" title="3.1、慢开始和拥塞避免"></a>3.1、慢开始和拥塞避免</h3><p><img src="http://img.likeqc.top/img/image-20210320130524401.png" alt="慢开始和拥塞避免"></p><h3 id="3-2、快重传和快恢复"><a href="#3-2、快重传和快恢复" class="headerlink" title="3.2、快重传和快恢复"></a>3.2、快重传和快恢复</h3><p><img src="http://img.likeqc.top/img/image-20210320130633672.png" alt="快重传和快恢复"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么选择在传输层就将数据分成多个段，而不是等到网络层再分片传递给数据链路层？</title>
      <link href="/posts/a8d7931/"/>
      <url>/posts/a8d7931/</url>
      
        <content type="html"><![CDATA[<hr><p>当应用层的数据包很大时，需要将数据划分为多个较小的数据再发送，可以选择在运输层（即传输层）分段，也可以选择在网络层分片，但是为什么一般都会选择在运输层进行分段呢？</p><p>​        原因：可靠传输是在运输层进行控制的，在运输层分段可以提高重传效率。</p><p>​        如果在运输层<strong>不分段</strong>，一旦出现<strong>数据丢失</strong>，<strong>整个</strong>运输层的数据都需要<strong>重传</strong>；</p><p>​        如果在运输层<strong>分段</strong>，一旦出现<strong>数据丢失</strong>，<strong>只</strong>需要<strong>重传丢失</strong>的那些段即可；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可靠传输：如果没有接收方没有收到数据，则重新发送，确保接收方收到。</span><br></pre></td></tr></table></figure><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 传输层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bug日常-2020-12-20 11:32:12</title>
      <link href="/posts/e96479e8/"/>
      <url>/posts/e96479e8/</url>
      
        <content type="html"><![CDATA[<hr><p>一周以前就遇到一个莫名奇妙的bug——一个简单的登录页面，点击登录访问<code>LoginServlet.java</code>这个Servlet，如果登录失败则自动跳转会<code>index.jsp</code>。但我只要访问<code>index.jsp</code>就会陷入无限循环。</p><p>当时百思不得，今天终于发现原因，都是不细心惹的祸，自己为难自己。</p><p><strong>原来不知什么时候我把这个Servlet的路径改成了index.jsp，这样开始是访问的index.jsp页面，实则直接请求的Servlet，然后由于没有输入任何信息（都没有访问登录页面，当然没有任何输入），所以登录失败，自动跳转到index.jsp（访问的不是jsp页面，而是Servlet），所以陷入了无限循环。</strong></p><p><img src="http://img.likeqc.top/img/image-20201220112549409.png" alt="image-20201220112549409"></p><p>将Servlet 的路径改正确就OK了</p><p><img src="http://img.likeqc.top/img/image-20201220113150988.png" alt="image-20201220113150988"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 生活随笔 </tag>
            
            <tag> eclipse </tag>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA tomcat报编译错误</title>
      <link href="/posts/f4b14775/"/>
      <url>/posts/f4b14775/</url>
      
        <content type="html"><![CDATA[<hr><p>idea默认使用的tomcat6，而tomcat6不支持jdk8，运行的时候会出现错误，需要在pom.xml中手动添加tomcat高版本，或者直接选用更高版本的tomcat。（<code>Edit Configuration...</code>→<code>tomcat</code>→<code>JRE</code>选择的<code>JDK</code>版本与<code>File</code>→<code>Project Structure</code>→<code>Project</code>→<code>Project SDK</code> 选择的JDK版本不一致也可能出现编译错误）</p><p><img src="http://img.likeqc.top/img/image-20201202172825420.png" alt="image-20201202172825420"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse创建tomcat时，next按钮是灰色，解决方法！</title>
      <link href="/posts/dfcb8b9d/"/>
      <url>/posts/dfcb8b9d/</url>
      
        <content type="html"><![CDATA[<hr><ul><li>解决方法1：<ol><li>退出 eclipse；</li><li>到<code>[当前工作目录]/.metadata/.plugins/org.eclipse.core.runtime/.settings</code>；</li><li>把<code>org.eclipse.wst.server.core.prefs</code>和<code>org.eclipse.jst.server.tomcat.core.prefs</code>这两个文件去掉；</li><li>重启eclipse。</li></ol></li><li>解决方法2：<ul><li>**<code>Window→Preference→Serve→Runtime Environment</code>**，删除该目录下无效的选项，只保留一项有效的选项即可。<img src="upload%5Cimage-20201125204725635.png" alt="image-20201125204725635"></li></ul></li></ul><p><img src="upload%5Cimage-20201125204932596.png" alt="image-20201125204932596"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql创建user表错误代码1005</title>
      <link href="/posts/47ff7cb2/"/>
      <url>/posts/47ff7cb2/</url>
      
        <content type="html"><![CDATA[<hr><p>使用sql语句创建<code>user</code>表报错<code>错误代码1005</code>,一般情况下1005错误是主键或外键有问题，但是这次的情况有点特殊：</p><p>sql语句如下，在test数据库中创建一个user表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>报错信息：</p><p><img src="http://img.likeqc.top/img/image-20201116175907307.png" alt="image-20201116175907307"></p><p>使用ui界面（此处使用的sqlyog）创建也报错：</p><p><img src="http://img.likeqc.top/img/image-20201116180210265.png" alt="image-20201116180210265"></p><p>错误原因：</p><p><strong>不能创建表名为<code>user</code>的表，相当于<code>user</code>是一个保留表名（低版本的mysql好像没有我这样的限制，我的版本是8.0有这样的限制）</strong></p><p>解决方法：</p><p>不要使用<code>user</code>表名，比如我换成其他表名，其余的都不改，就能创建成功</p><p><img src="http://img.likeqc.top/img/image-20201116180734963.png" alt="image-20201116180734963"></p><p><img src="http://img.likeqc.top/img/image-20201116180815383.png" alt="image-20201116180815383"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux ifconfig -a 没有eth0，而是eth1</title>
      <link href="/posts/50a72ad9/"/>
      <url>/posts/50a72ad9/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="ifconfig-a命令后没有eth0网卡，而是eth1和lo-网卡"><a href="#ifconfig-a命令后没有eth0网卡，而是eth1和lo-网卡" class="headerlink" title="ifconfig -a命令后没有eth0网卡，而是eth1和lo`网卡"></a>ifconfig -a<code>命令后没有</code>eth0<code>网卡，而是</code>eth1<code>和</code>lo`网卡</h1><p> <img src="http://img.likeqc.top/img/image-20201031112201326.png" alt="image-20201031112201326"></p><p>原因：克隆虚拟机模板，VMWare为了避免网卡冲突会重新为新的虚拟机模板虚拟一个网卡eth1，这就是为什么ifconfig时没有eth0了，虽然VMWare为新的CentOS虚拟机虚拟了一个新的网卡eth1，但它并没有更改/etc/sysconfig/network-scripts/ifcfg-eth0的信息</p><p><strong>解决方法：</strong></p><ol><li><p><code>vim /etc/udev/rules.d/70-persistent-net.rules</code>，删除eth0对应的那一行，只保留eth1对应一行，记录eth1中的MAC地址（红框部分），然后将<code>NAME=&quot;eth1&quot;</code>改为<code>NAME=&quot;eth0&quot;</code></p><p><img src="http://img.likeqc.top/img/image-20201031112916687.png" alt="image-20201031112916687"></p><p>更改后</p><p><img src="http://img.likeqc.top/img/image-20201031113355747.png" alt="image-20201031113355747"></p></li><li><p><code>Esc</code>  -&gt; <code>:wq</code> 退出保存</p></li><li><p><code>vim /etc/sysconfig/network-scripts/ifcfg-eth0</code>, 将<code>HWADDR</code>的MAC地址修改为步骤1中记录的MAC地址</p><p><img src="http://img.likeqc.top/img/image-20201031113906266.png" alt="image-20201031113906266"></p><p>修改DEVICE、HWADDR ，修改为与步骤1一致</p><p><img src="http://img.likeqc.top/img/image-20201031114125903.png" alt="image-20201031114125903"></p></li><li><p><code>Esc</code>  -&gt; <code>:wq</code> 退出保存</p></li><li><p><code>reboot</code>，重启系统</p></li><li><p><code>ifconfig -a</code>，查看网卡</p><p><img src="http://img.likeqc.top/img/image-20201031114529853.png" alt="image-20201031114529853"></p></li></ol><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA maven使用本地仓库中的插件创建项目 -DarchetypeCatalog=internal</title>
      <link href="/posts/74c24609/"/>
      <url>/posts/74c24609/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="加快项目创建-DarchetypeCatalog-internal"><a href="#加快项目创建-DarchetypeCatalog-internal" class="headerlink" title="# 加快项目创建 -DarchetypeCatalog=internal"></a># 加快项目创建 -DarchetypeCatalog=internal</h3><p>每次创建项目时， IDEA 要使用插件进行创建，这些插件当你创建新的项目时，它每次都会去中央仓库下载，这样</p><p>使得创建比较慢。应该创建时，让它找本地仓库中的插件进行创建项目。</p><p><strong>解决方式：</strong></p><p>在 IDEA 的 Settings 窗口的 Build, Execution, Deployment &gt; Build Tools &gt; Maven &gt; Runner 中对 VM Option 设置</p><p>为**<code> -DarchetypeCatalog=internal</code>**</p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode头文件红线，编译正常</title>
      <link href="/posts/8c2e523c/"/>
      <url>/posts/8c2e523c/</url>
      
        <content type="html"><![CDATA[<hr><p>更新：<strong>经过排查，发现是Clang插件的问题，但是不能直接卸载，因为Codecpp-full依赖clang，（Codecpp在这方面的辅助是真的好用）</strong><br><strong>解决方案，在用户配置文件中，    “clang.diagnostic.enable”: false 即可</strong></p><p>下面的方法不管用</p><hr><p>#include &lt;xxx.h&gt;<code>始终会有红线，提示</code>file not found`，但是编译运行一切正常。</p><p>经过排除，是因为安装了<code>C/C++ Clang Command Adapter</code>这个插件引起的。</p><p>github找到了类似问题的回答<a href="https://github.com/mitaki28/vscode-clang/issues/50">https://github.com/mitaki28/vscode-clang/issues/50</a></p><p><img src="http://img.likeqc.top/img/image-20201007152934157.png" alt="image-20201007152934157"></p><p><strong>vscode的默认安装文件夹<code>Microsoft VS Code</code>恰好有空格，将空格替换为<code>_</code>即<code>Microsoft_VS_Code</code>解决了红线问题</strong></p><p>ps：修改文件夹后，环境变量中和vscode配置文件中的路径也要一并修改。</p><p><em>所以要养成良好的习惯，用下划线_替代空格</em></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>油猴脚本使用（428专用版本）</title>
      <link href="/posts/881bfa73/"/>
      <url>/posts/881bfa73/</url>
      
        <content type="html"><![CDATA[<hr><p><em>本文主要分享油猴脚本的使用，顺便分享如何科学上网，打开新世界的大门。。。（百度太恶心，想用Google不可避免的要科学上网[小声bb]）</em></p><h2 id="1、科学上网"><a href="#1、科学上网" class="headerlink" title="1、科学上网"></a>1、科学上网</h2><p>目前我使用的软件是<a href="https://www.v2ray.com/">V2ray</a>,已经打包好了，<a href="https://likeqc.lanzous.com/icms62f">点击我下载并解压</a>（这个文件我是直接打包的我本地的软件，配置啥的都弄好了的，不出意外应该解压就能直接用），下面大概讲一下怎么使用v2ray:</p><p><img src="https://i.loli.net/2020/05/14/VnAri8F6EUtYN3d.jpg"></p><p><img src="https://i.loli.net/2020/05/14/tlvmZzX3TANGKCF.jpg"></p><p><img src="https://i.loli.net/2020/05/14/jlaThkRE2F8mQZW.jpg"></p><p><img src="https://i.loli.net/2020/05/14/6PpKz4VZt75aFue.jpg"></p><p><img src="https://i.loli.net/2020/05/14/y8n7cw3qjO5Px4d.jpg"></p><h2 id="2-下载油猴插件"><a href="#2-下载油猴插件" class="headerlink" title="2 下载油猴插件"></a>2 下载油猴插件</h2><p>此时你应该能够成功访问<a href="https://www.google.com/">Google</a>了,接下来安装<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">油猴插件</a></p><p><img src="https://i.loli.net/2020/05/14/dw5L2xWB1HPbA7f.jpg"></p><p>然后访问<a href="https://greasyfork.org/zh-CN">Greasy Fork</a>，这里后很多很多的脚本可以免费使用，快活去吧！</p><p><img src="https://i.loli.net/2020/05/14/xZvjMPYcka9TXq5.jpg"></p><p><img src="https://i.loli.net/2020/05/14/UxHFefKWbnI6yvD.jpg"></p><p><img src="https://i.loli.net/2020/05/14/hevCrOHZE253atP.jpg"></p><p><img src="https://i.loli.net/2020/05/14/Rn5PLsfTNt4zQpZ.jpg"></p><p><strong>刷题的脚本平时 不用一定要记得关闭，因为一般都有自动提交功能！我的web就是因为忘记关刷题脚本，不小心把我的代码题全都空白提交了。</strong></p><p><strong>刷题的脚本平时 不用一定要记得关闭，因为一般都有自动提交功能！我的web就是因为忘记关刷题脚本，不小心把我的代码题全都空白提交了。</strong></p><p><strong>刷题的脚本平时 不用一定要记得关闭，因为一般都有自动提交功能！我的web就是因为忘记关刷题脚本，不小心把我的代码题全都空白提交了。</strong></p><p><img src="https://i.loli.net/2020/05/14/W7ivVYd8Uq4y95t.jpg"></p><hr><p>你以为结束了，其实还没有结束。。。</p><p>暂时科学上网失败的，我也给打包好了<a href="https://likeqc.lanzous.com/icms0kh">油猴插件</a>（谁叫你是大家的小可爱呢）,下载后拖到谷歌浏览器即可完成安装。</p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chrome插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在更改标签内元素前输出该标签，显示的却是更改后的标签</title>
      <link href="/posts/ddb2af6d/"/>
      <url>/posts/ddb2af6d/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="在更改标签内元素前输出该标签，显示的却是更改后的标签"><a href="#在更改标签内元素前输出该标签，显示的却是更改后的标签" class="headerlink" title="在更改标签内元素前输出该标签，显示的却是更改后的标签"></a>在更改标签内元素前输出该标签，显示的却是更改后的标签</h1><p>使用<code>&lt;select&gt;</code>标签做一个下拉选项条，当选中了某一个选项后，选项条中的选项发生改变。在该<code>&lt;select&gt;</code>标签中的选项发现改变前后使用<code>console.log()</code>输出该标签，显示的确都是改变后的标签。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(t);</span><br><span class="line">        t.innerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(t);</span><br><span class="line">        t.innerHTML = <span class="string">&quot;&lt;option&gt;改变了&lt;/option&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(t);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;fun()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>这是一个选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>这是一个选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="http://img.likeqc.top/img/image-20201105202915189.png" alt="image-20201105202915189"></p><hr><p><strong>原因：<code>console.log(t)</code>输出的<code>t</code>是一个引用值，所以显示都是更改后的最终结果。改为<code>console.log(t.innerHTML)</code>输出的才是其中的内容。</strong></p><p>改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(t.innerHTML);</span><br><span class="line">        t.innerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(t.innerHTML);</span><br><span class="line">        t.innerHTML = <span class="string">&quot;&lt;option&gt;改变了&lt;/option&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(t.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="http://img.likeqc.top/img/image-20201105203122404.png" alt="image-20201105203122404"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无VIP倍速播放百度网盘视频</title>
      <link href="/posts/6e6b53c0/"/>
      <url>/posts/6e6b53c0/</url>
      
        <content type="html"><![CDATA[<hr><p>在播放页面按<code>F12</code>打开控制台，选择<code>console</code>，复制如下代码并回车：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videojs.getPlayers(&quot;video-player&quot;).html5player.tech_.setPlaybackRate(1.5)</span><br></pre></td></tr></table></figure><p><em>1.5是倍速，要的倍速调成相应地数字即可</em></p><p><img src="http://img.likeqc.top/img/image-20201102135947163.png" alt="image-20201102135947163"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BufferedReader类读取中文乱码</title>
      <link href="/posts/d4628ca0/"/>
      <url>/posts/d4628ca0/</url>
      
        <content type="html"><![CDATA[<h3 id="BufferedReader类读取中文乱码"><a href="#BufferedReader类读取中文乱码" class="headerlink" title="BufferedReader类读取中文乱码"></a>BufferedReader类读取中文乱码</h3><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filename, Charset.forName(<span class="string">&quot;utf-8&quot;</span>)));</span><br></pre></td></tr></table></figure><p>在new FileReader类对象的时候，使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileReader(String fileName, Charset charset)</span><br></pre></td></tr></table></figure><p>这个构造函数传一个参数指定一下字符集就OK了。原因是不指定字符集的话就会使用默认的字符集（一般是GBK），若与要读取文件的字符集不一致，则即便是字符流也会出现乱码。</p><p>字符集获取方法（Charset类是<strong>不可变类</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Charset.forName(String charsetName)</span><br></pre></td></tr></table></figure><hr><p>参考资料：</p><p><a href="https://www.cnblogs.com/Mr-Qiang/p/5304839.html">java里面字符集和Charset类</a><br><a href="https://blog.csdn.net/maxracer/article/details/5436580">Java 解決BufferedReader读取UTF-8文件中文乱码</a></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOSBox debug可执行程序</title>
      <link href="/posts/a48046d7/"/>
      <url>/posts/a48046d7/</url>
      
        <content type="html"><![CDATA[<hr><p>微机原理实验课的要求debug可执行程序，然而我的win10 x64系统没有debug，通过百度安装了DOSBox，终于能debug。但是我当时却不知道怎么debug我写的.exe程序（实验室的电脑是win7系统，按win键输入“debug 程序路径”就直接运行了），再用同样的操作总是提示错误。。。<br>然后我憨憨的安装了win7虚拟机。。。</p><p><strong>今天才发现</strong></p><p><img src="https://img-blog.csdnimg.cn/20191007180551471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191007180702460.png" alt="img"></p><p><strong>woc，这意思就是此时的D盘实际上是我的软件目录（恍然大悟），把我的程序放到软件目录不就行了</strong><br>完美解决</p><p><img src="https://img-blog.csdnimg.cn/20191007181110862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191007181155481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><em>百度上还有很多其他方法，自己搜</em><br>还没有过四级的我流下了悔恨的泪</p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微机原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统下，java编译器（javac）不区分大小写，java解释器（java）严格区分大小写</title>
      <link href="/posts/b2d1c8c5/"/>
      <url>/posts/b2d1c8c5/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>java是一门严格区分大小写的语言。</strong><br>但是在Windows系统下，却有如下情况：</p><p><img src="https://img-blog.csdnimg.cn/2019100520262958.png" alt="img"></p><p>使用cmd命名编译执行此程序</p><p><img src="https://img-blog.csdnimg.cn/20191005202457664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>由此可以发现，Windows系统中java编译器（javac）并没有严格区分大小写！<br>what？什么情况？说话的严格区分大小写呢，为啥java编译器（javac）没有严格区分大小写，而java解释器（java）就严格区分大小写。</p><p><strong>以下属于个人推测：</strong></p><ul><li><p>在Windows系统中，java编译器不区分大小写，因为Windows系统不区分大小写，当使用javac解释某个源程序文件时，是通过系统去寻找目标文件；而java解释器（java）则严格区分大小写，此时应该是JVM自己去找到需要的类文件，所以一定是严格区分大小写的。</p></li><li><p>另外，javac需要的是文件名（文件名 = 文件主名 + 扩展名），所以要带上后缀 .class；而java需要的是类名（类名默认后缀 .class），所以就不需要指明后缀了。</p></li></ul><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写一个应用程序，一些相续正整数的立方和正好等于另一个整数的立方</title>
      <link href="/posts/a1526198/"/>
      <url>/posts/a1526198/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>声明：</strong> 本文内容思路借鉴了网络上的一些前辈的文章，属于理解后的整理加工产物</p><h2 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下:"></a>题目如下:</h2><p><img src="https://img-blog.csdnimg.cn/20191005110203872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>1、示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入一个数作为上限&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> high = sc.nextInt() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[high];</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; high; i++) &#123;<span class="comment">// 0~high之间的数的立方赋值给对应下标的数组元素</span></span><br><span class="line">            array[i] = i * i * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; high; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i ; j++)<span class="comment">// 求和范围的左端</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; i; k++) &#123;<span class="comment">// 右端</span></span><br><span class="line">            sum += array[k];<span class="comment">// 先累加求和</span></span><br><span class="line">            <span class="keyword">if</span>(sum == array[i]) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d^3 + ...... + %d^3 = %d^3\n&quot;</span>, j, k, i);</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; array[i] || k + <span class="number">1</span> == i) &#123;<span class="comment">// 若sum已经大于目标值  或 已经累加到最右端</span></span><br><span class="line">                sum = <span class="number">0</span>;<span class="comment">// 则初始化sum并跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思想很简单：</p><ol><li>先把每个数的立方值赋值给数组对应下标的元素；</li><li>对目标数字前的n-1个数可能出现的每一种情况分别累加求和，符合情况的就输出。</li></ol><p><strong>2、错误写法</strong>（只显示与最终代码不一样的地方，下同）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(sum &gt; array[i]) &#123;<span class="comment">// 这是最终代码中的第二个if条件的错误写法示例</span></span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：可能出现 13+23+…+（n-1）3 &lt; n3 这样的情况</p><p><strong>3、不推荐写法</strong><br>（1）改动的地方是下面的第三条语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; high; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i ; j++) &#123;<span class="comment">// 求和范围的左端</span></span><br><span class="line">        sum = <span class="number">0</span>;<span class="comment">// 此处添加一条初始化sum的语句的话，思想与示例代码完全一致，但是会导致sum被重复初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; i; k++) &#123;<span class="comment">// 右端</span></span><br><span class="line">            sum += array[k];            <span class="comment">// 先累加求和</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == array[i]) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d^3 + ...... + %d^3 = %d^3\n&quot;</span>, j, k, i);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; array[i]) &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）或则是下面这一种写法(第二个if语句)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(k + <span class="number">1</span> == i) &#123;<span class="comment">// 这样虽然不会出现sum重复初始化的情况，</span></span><br><span class="line">    sum = <span class="number">0</span>;<span class="comment">// 但是当出现 sum &gt; array[i] 情况时，还会继续进行没有必要的循环</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java在构造函数函数中调用其他构造函数——this指针</title>
      <link href="/posts/3417bc72/"/>
      <url>/posts/3417bc72/</url>
      
        <content type="html"><![CDATA[<hr><p>当一个类有多个构造函数时，为了减少代码量，我希望在一个构造函数中调用其他构造函数，此时可以使用使用this指针达到目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Person person3 = <span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    Person() &#123;<span class="comment">// 缺省构造函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用了默认构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Person(String na) &#123;<span class="comment">// 带一个参数的构造函数</span></span><br><span class="line">        name = na;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;调用了1个参数的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Person(String na, <span class="keyword">int</span> ag) &#123;<span class="comment">// 带两个参数的构造函数</span></span><br><span class="line">        <span class="keyword">this</span>(na);<span class="comment">// 调用其他构造函数，必须放在首句（即不能同时调用两个）</span></span><br><span class="line">        age = ag;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;调用了2个参数的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img-blog.csdnimg.cn/20191002184555991.png" alt="img"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++一个类的成员函数作为另一个类的友元函数</title>
      <link href="/posts/6a56fdc4/"/>
      <url>/posts/6a56fdc4/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="先上一段代码。定义了两个类，都有私有变量num。分别用全局函数、友元函数计算两者的和。"><a href="#先上一段代码。定义了两个类，都有私有变量num。分别用全局函数、友元函数计算两者的和。" class="headerlink" title="先上一段代码。定义了两个类，都有私有变量num。分别用全局函数、友元函数计算两者的和。"></a>先上一段代码。定义了两个类，都有私有变量num。分别用全局函数、友元函数计算两者的和。</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span>    <span class="comment">// 此行可不加，这里加此行是因为下面举例子有用  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> n = <span class="number">0</span>): <span class="built_in">num</span>(n) &#123;&#125; <span class="comment">// 构造函数  </span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sum_1</span><span class="params">(A &amp;amp;a, B &amp;amp;b)</span></span>;  <span class="comment">// 全局函数 sum_1  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sum_2</span><span class="params">(B &amp;amp;b)</span></span>;               <span class="comment">// 成员函数 sum_2  </span></span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> n = <span class="number">0</span>) : <span class="built_in">num</span>(n) &#123;&#125;    <span class="comment">// 构造函数  </span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sum_1</span><span class="params">(A &amp;amp;a, B &amp;amp;b)</span></span>;  <span class="comment">// 全局函数 sum_1  </span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">A::sum_2</span><span class="params">(B &amp;amp;b)</span></span>;     <span class="comment">// 友元函数 A::sum_2  </span></span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="keyword">int</span> num;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 全局函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum_1</span><span class="params">(A &amp;amp;a, B &amp;amp;b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> sum = a.num + b.num;    <span class="comment">// 访问了两个对象的私有变量  </span></span><br><span class="line">    cout &amp;lt;&amp;lt; a.num &amp;lt;&amp;lt; <span class="string">&quot; + &quot;</span> &amp;lt;&amp;lt; b.num &amp;lt;&amp;lt; <span class="string">&quot; = &quot;</span> &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 友元函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::sum_2</span><span class="params">(B &amp;amp;b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> sum = num + b.num;  <span class="comment">// 访问了参数对象的私有变量  </span></span><br><span class="line">    cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; <span class="string">&quot; + &quot;</span> &amp;lt;&amp;lt; b.num &amp;lt;&amp;lt; <span class="string">&quot; = &quot;</span> &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="function">A <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;  </span><br><span class="line">    B b;  </span><br><span class="line">    <span class="built_in">sum_1</span>(a, b);    <span class="comment">// 调用全局函数</span></span><br><span class="line">    a.<span class="built_in">sum_2</span>(b);     <span class="comment">// 调用a的成员函数</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;PAUSE&quot;</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h5 id="1-提前声明要使用的类"><a href="#1-提前声明要使用的类" class="headerlink" title="1. 提前声明要使用的类"></a>1. 提前声明要使用的类</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br></pre></td></tr></table></figure><p>编译器会报错：<code>error C2061: 语法错误: 标识符“B”</code></p><p>本例中，先对类 B 进行了声明，但是没有定义。因为在类 A 的定义中，出现的函数 <code>sum_1</code> 和 <code>sum_2</code> 均要用到类B 名，所以必须事先声明“B”是一个类名，这样编译器才不会因为不知道”B“是什么而报错。</p><h5 id="2-必须将先定义的类的成员函数作为后定义类的友元函数，调换顺序会出现语法错误"><a href="#2-必须将先定义的类的成员函数作为后定义类的友元函数，调换顺序会出现语法错误" class="headerlink" title="2. 必须将先定义的类的成员函数作为后定义类的友元函数，调换顺序会出现语法错误"></a>2. 必须将先定义的类的成员函数作为后定义类的友元函数，调换顺序会出现语法错误</h5><p><em>本例中，若将 A、B 类的定义顺序调换，其余均不变，则出现语法错误</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span>    <span class="comment">// 此行可不加，这里加此行是因为下面举例子有用 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span>   <span class="comment">// A、B类的定义顺序变了</span></span><br><span class="line">    ...<span class="comment">/*中间的语句不变*/</span>   </span><br><span class="line">&#125;; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>  </span><br><span class="line">    ...<span class="comment">/*中间的语句不变*/</span>  </span><br><span class="line">&#125;;  </span><br><span class="line">...<span class="comment">/*后面的语句不变*/</span></span><br></pre></td></tr></table></figure><p><strong>在友元函数的实现中，会出现</strong></p><p><img src="https://img-blog.csdnimg.cn/20190427180419405.png" alt="img"></p><p><code>这说明B类中没有成功的把A类的成员函数sum_2声明为自己的友元函数。 道理很很简单，和第1点很相似。若先定义B类，那么我们观察一下B类定义中的如下语句</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">A::sum_2</span><span class="params">(B &amp;amp;b)</span></span>;     <span class="comment">// 友元函数 A::sum_2</span></span><br></pre></td></tr></table></figure><p><strong>该语句通过类名加域运算符，将A类的成员函数sum_2声明为友元函数。等等，是不是发现了什么，这是A类根本还没有定义，编译器只知道A是一个类名，A中具体有什么全然不知。如此，那么这一个语句当然无效咯！</strong></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
