<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Lombok的@Data注解时，指定某字段不加入到toString</title>
      <link href="posts/4487daf7/"/>
      <url>posts/4487daf7/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://segmentfault.com/q/1010000017412280">JAVA Lombok 使用@Data时，如何指定字段不加入到toString</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/Lombok.svg"></p><p><em>刚刚遇到一个bug，经过断点调试发现问题出在一条输出语句上，该语句输出的是一个对象，调用了对象的 toString() 方法，而我的 pojo 类统一使用的 <a href="https://projectlombok.org/">Lombok</a> 的 @Data 注解自动生成 getter，settet 和 toString 方法。恰好我的 pojo 中某些属性是没有 toString() 方法的，写的时候没有注意到，所以我需要指定特定字段不要加入到 toString() 方法中。</em></p><h4 id="ToString-Exclude"><a href="#ToString-Exclude" class="headerlink" title="@ToString.Exclude"></a>@ToString.Exclude</h4><p>该注解加可以在某一个属性上，表示该属性不加到 toString() 方法中。</p><h4 id="ToString-exclude-“属性1”-“属性2”"><a href="#ToString-exclude-“属性1”-“属性2”" class="headerlink" title="@ToString(exclude = {“属性1”, “属性2”})"></a>@ToString(exclude = {“属性1”, “属性2”})</h4><p>加在类上， 参数 exclude 是一个 String 数组，可以排除指定的属性不加入到  toString() 方法中。</p><h4 id="Getter-AccessLevel-NONE-amp-Setter-AccessLevel-NONE"><a href="#Getter-AccessLevel-NONE-amp-Setter-AccessLevel-NONE" class="headerlink" title="@Getter(AccessLevel.NONE) &amp;@Setter(AccessLevel.NONE)"></a>@Getter(AccessLevel.NONE) &amp;@Setter(AccessLevel.NONE)</h4><p>加在属性上，表示不生成 getter，setter 方法。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombok </tag>
            
            <tag> bug日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis解决key乱码问题</title>
      <link href="posts/7894bc3b/"/>
      <url>posts/7894bc3b/</url>
      
        <content type="html"><![CDATA[<h1 id="redis乱码"><a href="#redis乱码" class="headerlink" title="redis乱码"></a>redis乱码</h1><p>在项目中使用redis保存数据时，发现 key 和 value 前面都有一串16进制的乱码</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20210405164824625.png" alt="image-20210405164824625"></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p><code>RedisTemplate</code>源码如下，可以看出默认使用的是**<code>JdkSerializationRedisSerializer</code>**进行序列化，造成乱码问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> RedisSerializer keySerializer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> RedisSerializer valueSerializer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> RedisSerializer hashKeySerializer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> RedisSerializer hashValueSerializer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> RedisSerializer&lt;String&gt; stringSerializer = RedisSerializer.string();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码。。。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (defaultSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">defaultSerializer = <span class="keyword">new</span> JdkSerializationRedisSerializer(</span><br><span class="line">classLoader != <span class="keyword">null</span> ? classLoader : <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (enableDefaultSerializer) &#123;</span><br><span class="line"><span class="keyword">if</span> (keySerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">keySerializer = defaultSerializer;</span><br><span class="line">defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (valueSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">valueSerializer = defaultSerializer;</span><br><span class="line">defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hashKeySerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">hashKeySerializer = defaultSerializer;</span><br><span class="line">defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hashValueSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">hashValueSerializer = defaultSerializer;</span><br><span class="line">defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="1、优雅的解决方法"><a href="#1、优雅的解决方法" class="headerlink" title="1、优雅的解决方法"></a>1、优雅的解决方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">// private RedisTemplate redisTemplate;</span></span><br><span class="line">StringRedisTemplate redisTemplate; <span class="comment">// 优雅地解决Redis乱码问题</span></span><br></pre></td></tr></table></figure><p><code>StringRedisTemplate</code>类的声明如下，就相当于<code>RedisTemplate&lt;String, String&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class StringRedisTemplate extends RedisTemplate&lt;String, String&gt;</span><br></pre></td></tr></table></figure><h2 id="2、设置序列化方式"><a href="#2、设置序列化方式" class="headerlink" title="2、设置序列化方式"></a>2、设置序列化方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决Redis乱码问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">    RedisSerializer stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">    redisTemplate.setKeySerializer(stringSerializer);</span><br><span class="line">    redisTemplate.setValueSerializer(stringSerializer);</span><br><span class="line">    redisTemplate.setHashKeySerializer(stringSerializer);</span><br><span class="line">    redisTemplate.setHashValueSerializer(stringSerializer);</span><br><span class="line">    <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第8-16行使用<code>@Autowired</code>标注了<code>setRedisTemplate</code>方法，项目启动的时候会调用该方法，为<code>redisTemplate</code>对象设置了序列化方法。</p><h2 id="3、配置类（示例代码使用的Jackson2JsonRedisSerializer）"><a href="#3、配置类（示例代码使用的Jackson2JsonRedisSerializer）" class="headerlink" title="3、配置类（示例代码使用的Jackson2JsonRedisSerializer）"></a>3、配置类（示例代码使用的Jackson2JsonRedisSerializer）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate redisTemplate = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer =</span><br><span class="line">                <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 设置完这个可以直接将对象以json格式存入redis中，但是取出来的时候要用JSON.parseArray(Json.toJsonString(object),Object.class)解析一下</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 调用后完成设置</span></span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PairWise算法 JAVA实现</title>
      <link href="posts/7839fb46/"/>
      <url>posts/7839fb46/</url>
      
        <content type="html"><![CDATA[<p>PairWise算法，基本思想是每一个测试用例至少会出现一个新的二元组（我瞎编的名词，懂得起我的意思即可），举个栗子：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20210404205926491.png" alt="image-20210404205926491"></p><p>上图中A,B,C列表示他们的取值，每一行表示一个测试用例，深色标记的测试用例即为不符合PairWise的用例。以第24个测试用例举例，它有“23”,“24”,“34”共三个二元组，但第21、第16、第12个个测试用例中都已经出现过，所以没有出现新的二元组，不符合PairWise方法。</p><p>JAVA实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PairWise（成对）测试方法</span></span><br><span class="line"><span class="comment"> * author: likeqc</span></span><br><span class="line"><span class="comment"> * date: 2021-4-4 11:06:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PairWise</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PairWise方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str String[][]，二维数组，一维数组 str[i] 中存放第 i 个因素的因子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solution</span><span class="params">(String[][] str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 传统方式测试用例数量</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 符合要求的测试用例数量</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i].length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输出的数据错误！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum *= str[i].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] one = <span class="keyword">new</span> <span class="keyword">int</span>[str.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">            <span class="comment">// 创造一个新的测试用例（传统方法，暴力所有可能的测试用例）</span></span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = str.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                one[j] = (one[j] + carry) % str[j].length;</span><br><span class="line">                <span class="keyword">if</span> (carry == <span class="number">1</span> &amp;&amp; one[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    carry = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    carry = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 测试该测试用例是否能够产生新的配对组</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str.length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; str.length; k++) &#123;</span><br><span class="line">                    String key = j + <span class="string">&quot;_&quot;</span> + str[j][one[j]] + <span class="string">&quot;,&quot;</span> + k + <span class="string">&quot;_&quot;</span> + str[k][one[k]];</span><br><span class="line">                    <span class="comment">// System.out.println(key);</span></span><br><span class="line">                    <span class="keyword">if</span> (hashMap.get(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="comment">// System.out.println(&quot;新的key：&quot; + key);</span></span><br><span class="line">                        hashMap.put(key, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 产生了新的配对组，说明该用例符合 PairWise 规则，输出</span></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.print(<span class="string">&quot;测试用例&quot;</span> + count + <span class="string">&quot;：&quot;</span> + str[<span class="number">0</span>][one[<span class="number">0</span>]]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; str.length; j++) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;,&quot;</span> + str[j][one[j]]);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;PairWise方法测试用用例：&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;传统方法测试用用例：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        solution(<span class="keyword">new</span> String[][]&#123;&#123;<span class="string">&quot;T&quot;</span>, <span class="string">&quot;F&quot;</span>&#125;, &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;, &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十二届蓝桥杯大赛模拟赛（第三期）题目与解答</title>
      <link href="posts/5e9e8135/"/>
      <url>posts/5e9e8135/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　ASCII 码将每个字符对应到一个数值（编码），用于信息的表示和传输。在 ASCII 码中，英文字母是按从小到大的顺序依次编码的，例如：字母 A 编码是 65, 字母 B 编码是 66，字母 C 编码是 67，请问字母 Q 编码是多少？</p><h6 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ASCII码与整型互转</span><br></pre></td></tr></table></figure><h6 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">81</span><br></pre></td></tr></table></figure><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><h6 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　请问在 1 到 2020 中，有多少个数与 2020 互质，即有多少个数与 2020 的最大公约数为 1。</p><h6 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h6 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = a;</span><br><span class="line">            a = b % a;</span><br><span class="line">            b = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2020</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gcd(i, <span class="number">2020</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="答案：-1"><a href="#答案：-1" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">800</span><br></pre></td></tr></table></figure><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><h6 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　有一棵二叉树，一个由2021个结点，其中有1000个结点有两个子结点，其他的结点有一个或者0个子结点。<br>　　请问，这棵二叉树有多少个叶结点？</p><h6 id="答案提交-2"><a href="#答案提交-2" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h6 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">已知：node &#x3D; 2021，node_2 &#x3D; 1000， 求node_0 &#x3D; ? (注：node_1表示只有一个子节点的节点)</span><br><span class="line">node &#x3D; 2021 &#x3D;&#x3D;&gt; edge &#x3D; node - 1 &#x3D; 2020; (除root节点外，所有节点都有一条指向父节点的边)</span><br><span class="line">node_2 &#x3D; 1000 &#x3D;&#x3D;&gt; edge_2 &#x3D; node_2 * 2 &#x3D; 2000;</span><br><span class="line">node_1 &#x3D; edge_1 &#x3D; edge - edge_2 &#x3D; 2020 - 2000 &#x3D; 20;</span><br><span class="line">node_0 &#x3D; node - node_2 - node_1 &#x3D; 2021 - 1000 - 20 &#x3D; 1001;</span><br></pre></td></tr></table></figure><h6 id="答案：-2"><a href="#答案：-2" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001</span><br></pre></td></tr></table></figure><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><h6 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　对于整数 v 和 p，定义 Pierce 序列为：<br>　　a[1] = v<br>　　a[i] = p % a[i-1]<br>　　例如，当 v = 8, p = 21 时，对应的 Pierce 序列为<br>　　a[1] = 8<br>　　a[2] = 5<br>　　a[3] = 1<br>　　再往后计算，值变为 0，不在我们考虑的范围内。因此当 v = 8, p = 21 时， Pierce 序列的长度为 3。<br> 　　当 p 一定时，对于不同的 v 值，Pierce 序列的长度可能不同。当 p = 8 时，若 1&lt;=v&lt;p，最长的 Pierce 序列出现在 v=13时，为(13, 8, 5, 1)，长度为 4。<br> 　　当 p=2021 时，最长的 Pierce 序列出现在 v=1160 时，请问这个序列有多长？</p><h6 id="答案提交-3"><a href="#答案提交-3" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h6 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Fibonacci数列的变种，题目中的第二个例子有问题，无视即可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> p = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>; <span class="comment">// for a[1]</span></span><br><span class="line">        <span class="keyword">int</span> last = v; <span class="comment">// last is a[i-1]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(last);</span></span><br><span class="line">        <span class="keyword">while</span> (last != <span class="number">1</span> &amp;&amp; last != <span class="number">0</span>) &#123;</span><br><span class="line">            last = p % last;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// System.out.println(last);</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="答案：-3"><a href="#答案：-3" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><h6 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　在 Excel 中，第 1 列到第 26 列的列名依次为 A 到 Z，从第 27 列开始，列名有两个字母组成，第 27 列到第 702 列的列名依次为 AA 到 ZZ。<br> 　　之后的列再用 3 个字母、4 个字母表示。<br> 　　请问，第 2021 列的列名是什么？</p><h6 id="答案提交-4"><a href="#答案提交-4" class="headerlink" title="答案提交"></a>答案提交</h6><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个有大写字母组成的字符串，在提交答案时只填写这个字符串，填写多余的内容将无法得分。</p><h6 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 进制转换（十进制转为26进制）</span><br><span class="line">&#x2F;&#x2F; Integer封装了进制转换的方法 Integer.toString(i, radix)</span><br><span class="line">&#x2F;&#x2F; 但表示方法是 0123456789 abcdefghijklmnopqrstuvwxyz，可以通过该方法求1-36范围的进制转换</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    char[] chars &#x3D; Integer.toString(2021, 26).toCharArray();</span><br><span class="line">    for (char c : chars) &#123;</span><br><span class="line">        char cc;</span><br><span class="line">        if (c &lt;&#x3D; &#39;9&#39;) &#123;</span><br><span class="line">            cc &#x3D; (char) (c - &#39;0&#39; - 1 + &#39;A&#39;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            cc &#x3D; (char) (c - &#39;a&#39; - 1 + &#39;A&#39; + 10);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(cc);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="答案：-4"><a href="#答案：-4" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BYS</span><br></pre></td></tr></table></figure><h2 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h2><h6 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　在书写一个较大的整数时，为了方便看清数位，通常会在数位之间加上逗号来分割数位，具体的，从右向左，每三位分成一段，相邻的段之间加一个逗号。<br> 　　例如，1234567 写成 1,234,567。<br> 　　例如，17179869184 写成 17,179,869,184。<br> 　　给定一个整数，请将这个整数增加分割符后输出。</p><h6 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入一行包含一个整数 v。</p><h6 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出增加分割符后的整数。</p><h6 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567</span><br></pre></td></tr></table></figure><h6 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,234,567</span><br></pre></td></tr></table></figure><h6 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17179869184</span><br></pre></td></tr></table></figure><h6 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17,179,869,184</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于 50% 的评测用例，0 &lt;= v &lt; 10^9 (10的9次方)。<br>　　对于所有评测用例，0 &lt;= v &lt; 10^18 (10的18次方)。</p><h6 id="答案：-5"><a href="#答案：-5" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    String s = sc.next();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        sb.append(s.charAt(s.length() - i - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; (i + <span class="number">1</span>) &lt; s.length()) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sb.reverse().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h2><h6 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　小蓝正在写一个网页显示一个新闻列表，他需要将总共 n 条新闻显示，每页最多可以显示 p 条，请问小蓝至少需要分多少页显示？<br>　　例如，如果要显示2021条新闻，每页最多显示10条，则至少要分203页显示。</p><h6 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入的第一行包含一个整数 n，表示要显示的新闻条数。<br> 　　第二行包含一个整数 p，表示每页最多可以显示的条数。</p><h6 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出一个整数，表示答案。</p><h6 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h6 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">203</span><br></pre></td></tr></table></figure><h6 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h6 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">101</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定-1"><a href="#数据规模和约定-1" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于所有评测用例，1 &lt;= n &lt;= 10000，1 &lt;= p &lt;= 100。</p><h6 id="答案：-6"><a href="#答案：-6" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> p = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> x = n / p + (n % p == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h2><h6 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　杂货铺老板一共有N件物品，每件物品具有ABC三种属性中的一种或多种。从杂货铺老板处购得一件物品需要支付相应的代价。<br>　　现在你需要计算出如何购买物品，可以使得ABC三种属性中的每一种都在至少一件购买的物品中出现，并且支付的总代价最小。</p><h6 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入第一行包含一个整数N。<br>　　以下N行，每行包含一个整数C和一个只包含”ABC”的字符串，代表购得该物品的代价和其具有的属性。</p><h6 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出一个整数，代表最小的代价。如果无论如何凑不齐ABC三种属性，输出-1。</p><h6 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 A</span><br><span class="line">9 BC</span><br><span class="line">11 CA</span><br><span class="line">4 A</span><br><span class="line">5 B</span><br></pre></td></tr></table></figure><h6 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定-2"><a href="#数据规模和约定-2" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于50%的评测用例，1 &lt;= N &lt;= 20<br>　　对于所有评测用例，1 &lt;= N &lt;= 1000， 1 &lt;= C &lt;= 100000</p><h6 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造一个hash表，分别存放A、B、C、AB、AC、BC、ABC对应的最低代价，最后遍历A+B+C、AB+C、AC+b、BC+A、ABC这四种情况找出最小代价即可。</span><br></pre></td></tr></table></figure><h6 id="答案：-7"><a href="#答案：-7" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MAX_INT = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span>[] weight = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        weight[i] = MAX_INT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p = sc.nextInt();</span><br><span class="line">        s = sc.next();</span><br><span class="line">        <span class="comment">// System.out.println(p + &quot;--&quot; + s);</span></span><br><span class="line">        <span class="keyword">if</span> (weight[getIndex(s)] &gt; p) &#123;</span><br><span class="line">            weight[getIndex(s)] = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = MAX_INT;</span><br><span class="line">    result = Math.min(result, weight[getIndex(<span class="string">&quot;ABC&quot;</span>)]);</span><br><span class="line">    result = Math.min(result, (weight[getIndex(<span class="string">&quot;AB&quot;</span>)] + weight[getIndex(<span class="string">&quot;C&quot;</span>)]));</span><br><span class="line">    result = Math.min(result, (weight[getIndex(<span class="string">&quot;BC&quot;</span>)] + weight[getIndex(<span class="string">&quot;A&quot;</span>)]));</span><br><span class="line">    result = Math.min(result, (weight[getIndex(<span class="string">&quot;AC&quot;</span>)] + weight[getIndex(<span class="string">&quot;B&quot;</span>)]));</span><br><span class="line">    result = Math.min(result, (weight[getIndex(<span class="string">&quot;A&quot;</span>)] + weight[getIndex(<span class="string">&quot;B&quot;</span>)] + weight[getIndex(<span class="string">&quot;C&quot;</span>)]));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// A = 1, B = 2, C = 4</span></span><br><span class="line">    <span class="comment">// AB = 3, AC = 5, BC = 6</span></span><br><span class="line">    <span class="comment">// ABC = 7</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> containA = <span class="number">0</span>, containB = <span class="number">0</span>, containC = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.contains(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">        containA = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.contains(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">        containB = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.contains(<span class="string">&quot;C&quot;</span>)) &#123;</span><br><span class="line">        containC = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (containA + containB + containC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h2><h6 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　给定一个矩阵 M，由 n 行 m 列组成，第 i 行第 j 列值为 M[i][j]。<br>　　定义矩阵 M 的重量为矩阵中所有元素的和，几位weight(M)<br>　　请找到矩阵左上角的一个子矩阵S（矩阵的前 r 行中的前 c 列组成），使得这个子矩阵的重量的两倍最接近矩阵 M 重量。即 |2 weight(S)-weight(M)| 最小。<br> 　　如果有多个子矩阵满足条件，请找出面积 r * c 最小的一个。<br> 　　如果仍然有多个子矩阵满足条件，请找出其中 r 最小的一个。</p><h6 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入第一行包含两个整数 n, m，表示矩阵的大小。<br>　　接下来 n 行，每行 m 个整数，表示给定的矩阵M。</p><h6 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出一行，包含两个整数 r, c，表示子矩阵为矩阵 M 的前 r 行中的前 c 列。</p><h6 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">3 0 1 1</span><br><span class="line">1 0 1 1</span><br><span class="line">1 1 -2 4</span><br></pre></td></tr></table></figure><h6 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定-3"><a href="#数据规模和约定-3" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于 30% 的评测用例，1 &lt;= n, m &lt;= 20, -10 &lt;= M[i][j] &lt;= 10。<br>　　对于 50% 的评测用例，1 &lt;= n, m &lt;= 100, -100 &lt;= M[i][j] &lt;= 100。<br>　　对于所有评测用例，1 &lt;= n, m &lt;= 1000, -1000 &lt;= M[i][j] &lt;= 1000。</p><h6 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先求出i行j列的重量并保存在weight[i][j]数组中，然后遍历该数组找出符合要求的 r、c</span><br></pre></td></tr></table></figure><h6 id="答案：-8"><a href="#答案：-8" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span>[][] M = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span>[][] weight = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    n = sc.nextInt();</span><br><span class="line">    m = sc.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            M[i][j] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> jWeight = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= i; k++) &#123;</span><br><span class="line">                jWeight += M[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">            weight[i][j] = weight[i][j - <span class="number">1</span>] + jWeight;</span><br><span class="line">            <span class="comment">// System.out.println(weight[i][j] + &quot;---&quot; + jWeight);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>, flag = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = Math.abs(<span class="number">2</span> * weight[i][j] - weight[n][m]);</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; flag) &#123;</span><br><span class="line">                flag = temp;</span><br><span class="line">                r = i;</span><br><span class="line">                c = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp == flag &amp;&amp; (i * j) &lt; (r * c)) &#123;</span><br><span class="line">                r = i;</span><br><span class="line">                c = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp == flag &amp;&amp; (i * j) == (r * c) &amp;&amp; (i &lt; r)) &#123;</span><br><span class="line">                r = i;</span><br><span class="line">                c = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(r + <span class="string">&quot; &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><h6 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h6><p>　　给定一个序列 (a_1, a_2, …, a_n), 它的一个上升子序列是指从序列中取出一些元素，按照原来的顺序排列后，是单调递增的序列。<br>　　例如，对于序列 (3, 2, 7, 6, 7)，取出下标为 2, 4, 5 的元素 a_2, a_4, a_5，即 2, 6, 7，是一个上升子序列。<br>　　在这个序列中，有 7 个长度为 2 的上升子序列，例如</p><pre><code>    1. 下标 1, 3 对应的 3, 7；    2. 下标 1, 4 对应的 3, 6；    3. 下标 1, 5 对应的 3, 7；    4. 下标 2, 3 对应的 2, 7；    5. 下标 2, 4 对应的 2, 6；    6. 下标 2, 5 对应的 2, 7；    7. 下标 4, 5 对应的 6, 7。</code></pre><p> 　　注意，可能有下标不同但对应数值相同的上升子序列，他们应当算成不同的上升子序列。<br> 　　给定序列，请问序列中一共有多少个长度为 k 的上升子序列。</p><h6 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h6><p>　　输入第一行包含两个整数 n, k，表示序列的长度和上升子序列的长度。<br>　　第二行包含 n 个整数 a_1, a_2, …, a_n，表示给定的序列。</p><h6 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h6><p>　　输出一行，包含一个整数，表示长度为 k 的上升子序列的数量，答案可能很大，请输出答案除以 1000007 的余数。</p><h6 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">3 2 7 6 7</span><br></pre></td></tr></table></figure><h6 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h6 id="数据规模和约定-4"><a href="#数据规模和约定-4" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h6><p>　　对于 30% 的评测用例，1 &lt;= n &lt;= 20, 0 &lt;= a_i &lt;= 100。<br>　　对于 50% 的评测用例，1 &lt;= n &lt;= 100, 0 &lt;= a_i &lt;= 1000。<br>　　对于所有评测用例，1 &lt;= n &lt;= 1000, 1 &lt;= k &lt;= 10, 0 &lt;= a_i &lt;= 10000。</p><h6 id="答案（暴力递归）："><a href="#答案（暴力递归）：" class="headerlink" title="答案（暴力递归）："></a>答案（暴力递归）：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        array[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    f(array, <span class="number">0</span>, Integer.MIN_VALUE, <span class="number">1</span>, k);</span><br><span class="line">    System.out.println(count % <span class="number">1000007</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> aim, <span class="keyword">int</span> kth, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kth &gt; len) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;finded!&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; array.length - (len - kth); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; aim) &#123;</span><br><span class="line">            f(array, i + <span class="number">1</span>, array[i], kth + <span class="number">1</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="思路（动态规划）"><a href="#思路（动态规划）" class="headerlink" title="思路（动态规划）"></a>思路（动态规划）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]表示以array[i]结尾，长度为j的上升子序列的数量，状态转移方程如下：</span><br><span class="line">dp[i][1] &#x3D; 1</span><br><span class="line">dp[i][j] &#x3D; sum(dp[i][j - 1]), (0 &lt;&#x3D; t &lt; i &amp;&amp; array[t] &lt; array[i])</span><br><span class="line"></span><br><span class="line">输出结果为： sum(dp[i][k]), (0 &lt;&#x3D; i &lt; n)</span><br></pre></td></tr></table></figure><h6 id="答案（动态规划）："><a href="#答案（动态规划）：" class="headerlink" title="答案（动态规划）："></a>答案（动态规划）：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="number">1000007</span>;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        array[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][k + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= k; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; i; t++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[t] &lt; array[i]) &#123;</span><br><span class="line">                    sum += dp[t][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][j] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count += dp[i][k];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议可靠传输、流量控制、拥塞控制</title>
      <link href="posts/cb437a6d/"/>
      <url>posts/cb437a6d/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="1、可靠传输"><a href="#1、可靠传输" class="headerlink" title="1、可靠传输"></a>1、可靠传输</h2><h3 id="1-1、停止等待协议（自动重传请求AQR（Automatic-Repeat-reQuest））"><a href="#1-1、停止等待协议（自动重传请求AQR（Automatic-Repeat-reQuest））" class="headerlink" title="1.1、停止等待协议（自动重传请求AQR（Automatic Repeat reQuest））"></a>1.1、停止等待协议（自动重传请求AQR（Automatic Repeat reQuest））</h3><p>每发送完一个分组就停止发送，等待对方的确认，收到确认后再发送下一个分组。</p><p><code>超时重传</code>：每发送一个分组时设置一个超时计时器，同时保留已发送分组的副本，若超时计时器到期任未收到确认，则重传。</p><p><code>确认丢失</code>：若接收方返回给发送方的确认在网络中丢失了，那么发送方无法知道自己发送的分组是出错、丢失，还是确认丢失，所以发送方会<code>超时重传</code></p><p><code>确认迟到</code>：什么也不做</p><h3 id="1-2、连续ARQ协议"><a href="#1-2、连续ARQ协议" class="headerlink" title="1.2、连续ARQ协议"></a>1.2、连续ARQ协议</h3><p>一次性发送多个分组。接收方一般采用累计确认的方式，即只对<code>按序到达</code>的最后一个分组发送确认，表示到这个分组为止的所有分组都已正确收到。当多个分组中的某一个分组丢失时，发送方需要重传丢失分组及后面的所有分组（<code>回退N</code>）。</p><h3 id="1-3、选择确认SACK"><a href="#1-3、选择确认SACK" class="headerlink" title="1.3、选择确认SACK"></a>1.3、选择确认SACK</h3><p>若收到的报文段无差错，只是未按序号，中间还缺少一些序号的数据，<strong>选择确认SACK</strong>能够只传送缺少的数据而不重传已经正确到达接收方的数据。</p><h2 id="2、流量控制"><a href="#2、流量控制" class="headerlink" title="2、流量控制"></a>2、流量控制</h2><p>让发送方的发送速率不要太快，要让接收方来得及接收。</p><p>发送方的发送窗口不过能超过接收方给出的接收窗口的大小。接收窗口的大小是动态的，接收方会在确认报文中的窗口字段动态更新接收窗口的大小。<strong>当接收窗口的大小为0时</strong>，发送方<strong>停止发送</strong>数据，同时启动一个定时器，若定时器超时仍没有收到接收方的非零窗口通知（因为通知可能中途丢失，若一致等待可能造成死锁），则<strong>发送测试报文主动询问</strong>。</p><h2 id="3、拥塞控制"><a href="#3、拥塞控制" class="headerlink" title="3、拥塞控制"></a>3、拥塞控制</h2><h3 id="3-1、慢开始和拥塞避免"><a href="#3-1、慢开始和拥塞避免" class="headerlink" title="3.1、慢开始和拥塞避免"></a>3.1、慢开始和拥塞避免</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20210320130524401.png" alt="慢开始和拥塞避免"></p><h3 id="3-2、快重传和快恢复"><a href="#3-2、快重传和快恢复" class="headerlink" title="3.2、快重传和快恢复"></a>3.2、快重传和快恢复</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20210320130633672.png" alt="快重传和快恢复"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么选择在传输层就将数据分成多个段，而不是等到网络层再分片传递给数据链路层？</title>
      <link href="posts/a8d7931/"/>
      <url>posts/a8d7931/</url>
      
        <content type="html"><![CDATA[<hr><p>当应用层的数据包很大时，需要将数据划分为多个较小的数据再发送，可以选择在运输层（即传输层）分段，也可以选择在网络层分片，但是为什么一般都会选择在运输层进行分段呢？</p><p>​        原因：可靠传输是在运输层进行控制的，在运输层分段可以提高重传效率。</p><p>​        如果在运输层<strong>不分段</strong>，一旦出现<strong>数据丢失</strong>，<strong>整个</strong>运输层的数据都需要<strong>重传</strong>；</p><p>​        如果在运输层<strong>分段</strong>，一旦出现<strong>数据丢失</strong>，<strong>只</strong>需要<strong>重传丢失</strong>的那些段即可；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可靠传输：如果没有接收方没有收到数据，则重新发送，确保接收方收到。</span><br></pre></td></tr></table></figure><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 传输层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bug日常-2020-12-20 11:32:12</title>
      <link href="posts/e96479e8/"/>
      <url>posts/e96479e8/</url>
      
        <content type="html"><![CDATA[<hr><p>一周以前就遇到一个莫名奇妙的bug——一个简单的登录页面，点击登录访问<code>LoginServlet.java</code>这个Servlet，如果登录失败则自动跳转会<code>index.jsp</code>。但我只要访问<code>index.jsp</code>就会陷入无限循环。</p><p>当时百思不得，今天终于发现原因，都是不细心惹的祸，自己为难自己。</p><p><strong>原来不知什么时候我把这个Servlet的路径改成了index.jsp，这样开始是访问的index.jsp页面，实则直接请求的Servlet，然后由于没有输入任何信息（都没有访问登录页面，当然没有任何输入），所以登录失败，自动跳转到index.jsp（访问的不是jsp页面，而是Servlet），所以陷入了无限循环。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201220112549409.png" alt="image-20201220112549409"></p><p>将Servlet 的路径改正确就OK了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201220113150988.png" alt="image-20201220113150988"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 生活随笔 </tag>
            
            <tag> eclipse </tag>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA tomcat报编译错误</title>
      <link href="posts/f4b14775/"/>
      <url>posts/f4b14775/</url>
      
        <content type="html"><![CDATA[<hr><p>idea默认使用的tomcat6，而tomcat6不支持jdk8，运行的时候会出现错误，需要在pom.xml中手动添加tomcat高版本，或者直接选用更高版本的tomcat。（<code>Edit Configuration...</code>→<code>tomcat</code>→<code>JRE</code>选择的<code>JDK</code>版本与<code>File</code>→<code>Project Structure</code>→<code>Project</code>→<code>Project SDK</code> 选择的JDK版本不一致也可能出现编译错误）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201202172825420.png" alt="image-20201202172825420"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse创建tomcat时，next按钮是灰色，解决方法！</title>
      <link href="posts/dfcb8b9d/"/>
      <url>posts/dfcb8b9d/</url>
      
        <content type="html"><![CDATA[<hr><ul><li>解决方法1：<ol><li>退出 eclipse；</li><li>到<code>[当前工作目录]/.metadata/.plugins/org.eclipse.core.runtime/.settings</code>；</li><li>把<code>org.eclipse.wst.server.core.prefs</code>和<code>org.eclipse.jst.server.tomcat.core.prefs</code>这两个文件去掉；</li><li>重启eclipse。</li></ol></li><li>解决方法2：<ul><li>**<code>Window→Preference→Serve→Runtime Environment</code>**，删除该目录下无效的选项，只保留一项有效的选项即可。<img src= "/img/loading.gif" data-lazy-src="upload%5Cimage-20201125204725635.png" alt="image-20201125204725635"></li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="upload%5Cimage-20201125204932596.png" alt="image-20201125204932596"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql创建user表错误代码1005</title>
      <link href="posts/47ff7cb2/"/>
      <url>posts/47ff7cb2/</url>
      
        <content type="html"><![CDATA[<hr><p>使用sql语句创建<code>user</code>表报错<code>错误代码1005</code>,一般情况下1005错误是主键或外键有问题，但是这次的情况有点特殊：</p><p>sql语句如下，在test数据库中创建一个user表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>报错信息：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201116175907307.png" alt="image-20201116175907307"></p><p>使用ui界面（此处使用的sqlyog）创建也报错：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201116180210265.png" alt="image-20201116180210265"></p><p>错误原因：</p><p><strong>不能创建表名为<code>user</code>的表，相当于<code>user</code>是一个保留表名（低版本的mysql好像没有我这样的限制，我的版本是8.0有这样的限制）</strong></p><p>解决方法：</p><p>不要使用<code>user</code>表名，比如我换成其他表名，其余的都不改，就能创建成功</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201116180734963.png" alt="image-20201116180734963"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201116180815383.png" alt="image-20201116180815383"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux ifconfig -a 没有eth0，而是eth1</title>
      <link href="posts/50a72ad9/"/>
      <url>posts/50a72ad9/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="ifconfig-a命令后没有eth0网卡，而是eth1和lo-网卡"><a href="#ifconfig-a命令后没有eth0网卡，而是eth1和lo-网卡" class="headerlink" title="ifconfig -a命令后没有eth0网卡，而是eth1和lo`网卡"></a>ifconfig -a<code>命令后没有</code>eth0<code>网卡，而是</code>eth1<code>和</code>lo`网卡</h1><p> <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201031112201326.png" alt="image-20201031112201326"></p><p>原因：克隆虚拟机模板，VMWare为了避免网卡冲突会重新为新的虚拟机模板虚拟一个网卡eth1，这就是为什么ifconfig时没有eth0了，虽然VMWare为新的CentOS虚拟机虚拟了一个新的网卡eth1，但它并没有更改/etc/sysconfig/network-scripts/ifcfg-eth0的信息</p><p><strong>解决方法：</strong></p><ol><li><p><code>vim /etc/udev/rules.d/70-persistent-net.rules</code>，删除eth0对应的那一行，只保留eth1对应一行，记录eth1中的MAC地址（红框部分），然后将<code>NAME=&quot;eth1&quot;</code>改为<code>NAME=&quot;eth0&quot;</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201031112916687.png" alt="image-20201031112916687"></p><p>更改后</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201031113355747.png" alt="image-20201031113355747"></p></li><li><p><code>Esc</code>  -&gt; <code>:wq</code> 退出保存</p></li><li><p><code>vim /etc/sysconfig/network-scripts/ifcfg-eth0</code>, 将<code>HWADDR</code>的MAC地址修改为步骤1中记录的MAC地址</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201031113906266.png" alt="image-20201031113906266"></p><p>修改DEVICE、HWADDR ，修改为与步骤1一致</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201031114125903.png" alt="image-20201031114125903"></p></li><li><p><code>Esc</code>  -&gt; <code>:wq</code> 退出保存</p></li><li><p><code>reboot</code>，重启系统</p></li><li><p><code>ifconfig -a</code>，查看网卡</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201031114529853.png" alt="image-20201031114529853"></p></li></ol><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA maven使用本地仓库中的插件创建项目 -DarchetypeCatalog=internal</title>
      <link href="posts/74c24609/"/>
      <url>posts/74c24609/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="加快项目创建-DarchetypeCatalog-internal"><a href="#加快项目创建-DarchetypeCatalog-internal" class="headerlink" title="# 加快项目创建 -DarchetypeCatalog=internal"></a># 加快项目创建 -DarchetypeCatalog=internal</h3><p>每次创建项目时， IDEA 要使用插件进行创建，这些插件当你创建新的项目时，它每次都会去中央仓库下载，这样</p><p>使得创建比较慢。应该创建时，让它找本地仓库中的插件进行创建项目。</p><p><strong>解决方式：</strong></p><p>在 IDEA 的 Settings 窗口的 Build, Execution, Deployment &gt; Build Tools &gt; Maven &gt; Runner 中对 VM Option 设置</p><p>为**<code> -DarchetypeCatalog=internal</code>**</p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode头文件红线，编译正常</title>
      <link href="posts/8c2e523c/"/>
      <url>posts/8c2e523c/</url>
      
        <content type="html"><![CDATA[<hr><p>更新：<strong>经过排查，发现是Clang插件的问题，但是不能直接卸载，因为Codecpp-full依赖clang，（Codecpp在这方面的辅助是真的好用）</strong><br><strong>解决方案，在用户配置文件中，    “clang.diagnostic.enable”: false 即可</strong></p><p>下面的方法不管用</p><hr><p>#include &lt;xxx.h&gt;<code>始终会有红线，提示</code>file not found`，但是编译运行一切正常。</p><p>经过排除，是因为安装了<code>C/C++ Clang Command Adapter</code>这个插件引起的。</p><p>github找到了类似问题的回答<a href="https://github.com/mitaki28/vscode-clang/issues/50">https://github.com/mitaki28/vscode-clang/issues/50</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201007152934157.png" alt="image-20201007152934157"></p><p><strong>vscode的默认安装文件夹<code>Microsoft VS Code</code>恰好有空格，将空格替换为<code>_</code>即<code>Microsoft_VS_Code</code>解决了红线问题</strong></p><p>ps：修改文件夹后，环境变量中和vscode配置文件中的路径也要一并修改。</p><p><em>所以要养成良好的习惯，用下划线_替代空格</em></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>油猴脚本使用（428专用版本）</title>
      <link href="posts/881bfa73/"/>
      <url>posts/881bfa73/</url>
      
        <content type="html"><![CDATA[<hr><p><em>本文主要分享油猴脚本的使用，顺便分享如何科学上网，打开新世界的大门。。。（百度太恶心，想用Google不可避免的要科学上网[小声bb]）</em></p><h2 id="1、科学上网"><a href="#1、科学上网" class="headerlink" title="1、科学上网"></a>1、科学上网</h2><p>目前我使用的软件是<a href="https://www.v2ray.com/">V2ray</a>,已经打包好了，<a href="https://likeqc.lanzous.com/icms62f">点击我下载并解压</a>（这个文件我是直接打包的我本地的软件，配置啥的都弄好了的，不出意外应该解压就能直接用），下面大概讲一下怎么使用v2ray:</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/VnAri8F6EUtYN3d.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/tlvmZzX3TANGKCF.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/jlaThkRE2F8mQZW.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/6PpKz4VZt75aFue.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/y8n7cw3qjO5Px4d.jpg"></p><h2 id="2-下载油猴插件"><a href="#2-下载油猴插件" class="headerlink" title="2 下载油猴插件"></a>2 下载油猴插件</h2><p>此时你应该能够成功访问<a href="https://www.google.com/">Google</a>了,接下来安装<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">油猴插件</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/dw5L2xWB1HPbA7f.jpg"></p><p>然后访问<a href="https://greasyfork.org/zh-CN">Greasy Fork</a>，这里后很多很多的脚本可以免费使用，快活去吧！</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/xZvjMPYcka9TXq5.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/UxHFefKWbnI6yvD.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/hevCrOHZE253atP.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/Rn5PLsfTNt4zQpZ.jpg"></p><p><strong>刷题的脚本平时 不用一定要记得关闭，因为一般都有自动提交功能！我的web就是因为忘记关刷题脚本，不小心把我的代码题全都空白提交了。</strong></p><p><strong>刷题的脚本平时 不用一定要记得关闭，因为一般都有自动提交功能！我的web就是因为忘记关刷题脚本，不小心把我的代码题全都空白提交了。</strong></p><p><strong>刷题的脚本平时 不用一定要记得关闭，因为一般都有自动提交功能！我的web就是因为忘记关刷题脚本，不小心把我的代码题全都空白提交了。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/05/14/W7ivVYd8Uq4y95t.jpg"></p><hr><p>你以为结束了，其实还没有结束。。。</p><p>暂时科学上网失败的，我也给打包好了<a href="https://likeqc.lanzous.com/icms0kh">油猴插件</a>（谁叫你是大家的小可爱呢）,下载后拖到谷歌浏览器即可完成安装。</p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chrome插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在更改标签内元素前输出该标签，显示的却是更改后的标签</title>
      <link href="posts/ddb2af6d/"/>
      <url>posts/ddb2af6d/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="在更改标签内元素前输出该标签，显示的却是更改后的标签"><a href="#在更改标签内元素前输出该标签，显示的却是更改后的标签" class="headerlink" title="在更改标签内元素前输出该标签，显示的却是更改后的标签"></a>在更改标签内元素前输出该标签，显示的却是更改后的标签</h1><p>使用<code>&lt;select&gt;</code>标签做一个下拉选项条，当选中了某一个选项后，选项条中的选项发生改变。在该<code>&lt;select&gt;</code>标签中的选项发现改变前后使用<code>console.log()</code>输出该标签，显示的确都是改变后的标签。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(t);</span><br><span class="line">        t.innerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(t);</span><br><span class="line">        t.innerHTML = <span class="string">&quot;&lt;option&gt;改变了&lt;/option&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(t);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;fun()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>这是一个选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>这是一个选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201105202915189.png" alt="image-20201105202915189"></p><hr><p><strong>原因：<code>console.log(t)</code>输出的<code>t</code>是一个引用值，所以显示都是更改后的最终结果。改为<code>console.log(t.innerHTML)</code>输出的才是其中的内容。</strong></p><p>改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(t.innerHTML);</span><br><span class="line">        t.innerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(t.innerHTML);</span><br><span class="line">        t.innerHTML = <span class="string">&quot;&lt;option&gt;改变了&lt;/option&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(t.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201105203122404.png" alt="image-20201105203122404"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无VIP倍速播放百度网盘视频</title>
      <link href="posts/6e6b53c0/"/>
      <url>posts/6e6b53c0/</url>
      
        <content type="html"><![CDATA[<hr><p>在播放页面按<code>F12</code>打开控制台，选择<code>console</code>，复制如下代码并回车：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videojs.getPlayers(&quot;video-player&quot;).html5player.tech_.setPlaybackRate(1.5)</span><br></pre></td></tr></table></figure><p><em>1.5是倍速，要的倍速调成相应地数字即可</em></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/likeqc/blogimage/raw/master/img/image-20201102135947163.png" alt="image-20201102135947163"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BufferedReader类读取中文乱码</title>
      <link href="posts/d4628ca0/"/>
      <url>posts/d4628ca0/</url>
      
        <content type="html"><![CDATA[<h3 id="BufferedReader类读取中文乱码"><a href="#BufferedReader类读取中文乱码" class="headerlink" title="BufferedReader类读取中文乱码"></a>BufferedReader类读取中文乱码</h3><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filename, Charset.forName(<span class="string">&quot;utf-8&quot;</span>)));</span><br></pre></td></tr></table></figure><p>在new FileReader类对象的时候，使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileReader(String fileName, Charset charset)</span><br></pre></td></tr></table></figure><p>这个构造函数传一个参数指定一下字符集就OK了。原因是不指定字符集的话就会使用默认的字符集（一般是GBK），若与要读取文件的字符集不一致，则即便是字符流也会出现乱码。</p><p>字符集获取方法（Charset类是<strong>不可变类</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Charset.forName(String charsetName)</span><br></pre></td></tr></table></figure><hr><p>参考资料：</p><p><a href="https://www.cnblogs.com/Mr-Qiang/p/5304839.html">java里面字符集和Charset类</a><br><a href="https://blog.csdn.net/maxracer/article/details/5436580">Java 解決BufferedReader读取UTF-8文件中文乱码</a></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOSBox debug可执行程序</title>
      <link href="posts/a48046d7/"/>
      <url>posts/a48046d7/</url>
      
        <content type="html"><![CDATA[<hr><p>微机原理实验课的要求debug可执行程序，然而我的win10 x64系统没有debug，通过百度安装了DOSBox，终于能debug。但是我当时却不知道怎么debug我写的.exe程序（实验室的电脑是win7系统，按win键输入“debug 程序路径”就直接运行了），再用同样的操作总是提示错误。。。<br>然后我憨憨的安装了win7虚拟机。。。</p><p><strong>今天才发现</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191007180551471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191007180702460.png" alt="img"></p><p><strong>woc，这意思就是此时的D盘实际上是我的软件目录（恍然大悟），把我的程序放到软件目录不就行了</strong><br>完美解决</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191007181110862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191007181155481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><em>百度上还有很多其他方法，自己搜</em><br>还没有过四级的我流下了悔恨的泪</p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微机原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统下，java编译器（javac）不区分大小写，java解释器（java）严格区分大小写</title>
      <link href="posts/b2d1c8c5/"/>
      <url>posts/b2d1c8c5/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>java是一门严格区分大小写的语言。</strong><br>但是在Windows系统下，却有如下情况：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019100520262958.png" alt="img"></p><p>使用cmd命名编译执行此程序</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191005202457664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>由此可以发现，Windows系统中java编译器（javac）并没有严格区分大小写！<br>what？什么情况？说话的严格区分大小写呢，为啥java编译器（javac）没有严格区分大小写，而java解释器（java）就严格区分大小写。</p><p><strong>以下属于个人推测：</strong></p><ul><li><p>在Windows系统中，java编译器不区分大小写，因为Windows系统不区分大小写，当使用javac解释某个源程序文件时，是通过系统去寻找目标文件；而java解释器（java）则严格区分大小写，此时应该是JVM自己去找到需要的类文件，所以一定是严格区分大小写的。</p></li><li><p>另外，javac需要的是文件名（文件名 = 文件主名 + 扩展名），所以要带上后缀 .class；而java需要的是类名（类名默认后缀 .class），所以就不需要指明后缀了。</p></li></ul><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写一个应用程序，一些相续正整数的立方和正好等于另一个整数的立方</title>
      <link href="posts/a1526198/"/>
      <url>posts/a1526198/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>声明：</strong> 本文内容思路借鉴了网络上的一些前辈的文章，属于理解后的整理加工产物</p><h2 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下:"></a>题目如下:</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191005110203872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjU5MzA0,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>1、示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入一个数作为上限&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> high = sc.nextInt() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[high];</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; high; i++) &#123;<span class="comment">// 0~high之间的数的立方赋值给对应下标的数组元素</span></span><br><span class="line">            array[i] = i * i * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; high; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i ; j++)<span class="comment">// 求和范围的左端</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; i; k++) &#123;<span class="comment">// 右端</span></span><br><span class="line">            sum += array[k];<span class="comment">// 先累加求和</span></span><br><span class="line">            <span class="keyword">if</span>(sum == array[i]) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d^3 + ...... + %d^3 = %d^3\n&quot;</span>, j, k, i);</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; array[i] || k + <span class="number">1</span> == i) &#123;<span class="comment">// 若sum已经大于目标值  或 已经累加到最右端</span></span><br><span class="line">                sum = <span class="number">0</span>;<span class="comment">// 则初始化sum并跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思想很简单：</p><ol><li>先把每个数的立方值赋值给数组对应下标的元素；</li><li>对目标数字前的n-1个数可能出现的每一种情况分别累加求和，符合情况的就输出。</li></ol><p><strong>2、错误写法</strong>（只显示与最终代码不一样的地方，下同）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(sum &gt; array[i]) &#123;<span class="comment">// 这是最终代码中的第二个if条件的错误写法示例</span></span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：可能出现 13+23+…+（n-1）3 &lt; n3 这样的情况</p><p><strong>3、不推荐写法</strong><br>（1）改动的地方是下面的第三条语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; high; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i ; j++) &#123;<span class="comment">// 求和范围的左端</span></span><br><span class="line">        sum = <span class="number">0</span>;<span class="comment">// 此处添加一条初始化sum的语句的话，思想与示例代码完全一致，但是会导致sum被重复初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; i; k++) &#123;<span class="comment">// 右端</span></span><br><span class="line">            sum += array[k];            <span class="comment">// 先累加求和</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == array[i]) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d^3 + ...... + %d^3 = %d^3\n&quot;</span>, j, k, i);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; array[i]) &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）或则是下面这一种写法(第二个if语句)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(k + <span class="number">1</span> == i) &#123;<span class="comment">// 这样虽然不会出现sum重复初始化的情况，</span></span><br><span class="line">    sum = <span class="number">0</span>;<span class="comment">// 但是当出现 sum &gt; array[i] 情况时，还会继续进行没有必要的循环</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java在构造函数函数中调用其他构造函数——this指针</title>
      <link href="posts/3417bc72/"/>
      <url>posts/3417bc72/</url>
      
        <content type="html"><![CDATA[<hr><p>当一个类有多个构造函数时，为了减少代码量，我希望在一个构造函数中调用其他构造函数，此时可以使用使用this指针达到目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Person person3 = <span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    Person() &#123;<span class="comment">// 缺省构造函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用了默认构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Person(String na) &#123;<span class="comment">// 带一个参数的构造函数</span></span><br><span class="line">        name = na;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;调用了1个参数的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Person(String na, <span class="keyword">int</span> ag) &#123;<span class="comment">// 带两个参数的构造函数</span></span><br><span class="line">        <span class="keyword">this</span>(na);<span class="comment">// 调用其他构造函数，必须放在首句（即不能同时调用两个）</span></span><br><span class="line">        age = ag;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;调用了2个参数的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191002184555991.png" alt="img"></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++一个类的成员函数作为另一个类的友元函数</title>
      <link href="posts/6a56fdc4/"/>
      <url>posts/6a56fdc4/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="先上一段代码。定义了两个类，都有私有变量num。分别用全局函数、友元函数计算两者的和。"><a href="#先上一段代码。定义了两个类，都有私有变量num。分别用全局函数、友元函数计算两者的和。" class="headerlink" title="先上一段代码。定义了两个类，都有私有变量num。分别用全局函数、友元函数计算两者的和。"></a>先上一段代码。定义了两个类，都有私有变量num。分别用全局函数、友元函数计算两者的和。</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span>    <span class="comment">// 此行可不加，这里加此行是因为下面举例子有用  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> n = <span class="number">0</span>): <span class="built_in">num</span>(n) &#123;&#125; <span class="comment">// 构造函数  </span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sum_1</span><span class="params">(A &amp;amp;a, B &amp;amp;b)</span></span>;  <span class="comment">// 全局函数 sum_1  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sum_2</span><span class="params">(B &amp;amp;b)</span></span>;               <span class="comment">// 成员函数 sum_2  </span></span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> n = <span class="number">0</span>) : <span class="built_in">num</span>(n) &#123;&#125;    <span class="comment">// 构造函数  </span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sum_1</span><span class="params">(A &amp;amp;a, B &amp;amp;b)</span></span>;  <span class="comment">// 全局函数 sum_1  </span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">A::sum_2</span><span class="params">(B &amp;amp;b)</span></span>;     <span class="comment">// 友元函数 A::sum_2  </span></span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="keyword">int</span> num;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 全局函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum_1</span><span class="params">(A &amp;amp;a, B &amp;amp;b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> sum = a.num + b.num;    <span class="comment">// 访问了两个对象的私有变量  </span></span><br><span class="line">    cout &amp;lt;&amp;lt; a.num &amp;lt;&amp;lt; <span class="string">&quot; + &quot;</span> &amp;lt;&amp;lt; b.num &amp;lt;&amp;lt; <span class="string">&quot; = &quot;</span> &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 友元函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::sum_2</span><span class="params">(B &amp;amp;b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> sum = num + b.num;  <span class="comment">// 访问了参数对象的私有变量  </span></span><br><span class="line">    cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; <span class="string">&quot; + &quot;</span> &amp;lt;&amp;lt; b.num &amp;lt;&amp;lt; <span class="string">&quot; = &quot;</span> &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="function">A <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;  </span><br><span class="line">    B b;  </span><br><span class="line">    <span class="built_in">sum_1</span>(a, b);    <span class="comment">// 调用全局函数</span></span><br><span class="line">    a.<span class="built_in">sum_2</span>(b);     <span class="comment">// 调用a的成员函数</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;PAUSE&quot;</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h5 id="1-提前声明要使用的类"><a href="#1-提前声明要使用的类" class="headerlink" title="1. 提前声明要使用的类"></a>1. 提前声明要使用的类</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br></pre></td></tr></table></figure><p>编译器会报错：<code>error C2061: 语法错误: 标识符“B”</code></p><p>本例中，先对类 B 进行了声明，但是没有定义。因为在类 A 的定义中，出现的函数 <code>sum_1</code> 和 <code>sum_2</code> 均要用到类B 名，所以必须事先声明“B”是一个类名，这样编译器才不会因为不知道”B“是什么而报错。</p><h5 id="2-必须将先定义的类的成员函数作为后定义类的友元函数，调换顺序会出现语法错误"><a href="#2-必须将先定义的类的成员函数作为后定义类的友元函数，调换顺序会出现语法错误" class="headerlink" title="2. 必须将先定义的类的成员函数作为后定义类的友元函数，调换顺序会出现语法错误"></a>2. 必须将先定义的类的成员函数作为后定义类的友元函数，调换顺序会出现语法错误</h5><p><em>本例中，若将 A、B 类的定义顺序调换，其余均不变，则出现语法错误</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span>    <span class="comment">// 此行可不加，这里加此行是因为下面举例子有用 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span>   <span class="comment">// A、B类的定义顺序变了</span></span><br><span class="line">    ...<span class="comment">/*中间的语句不变*/</span>   </span><br><span class="line">&#125;; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>  </span><br><span class="line">    ...<span class="comment">/*中间的语句不变*/</span>  </span><br><span class="line">&#125;;  </span><br><span class="line">...<span class="comment">/*后面的语句不变*/</span></span><br></pre></td></tr></table></figure><p><strong>在友元函数的实现中，会出现</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190427180419405.png" alt="img"></p><p><code>这说明B类中没有成功的把A类的成员函数sum_2声明为自己的友元函数。 道理很很简单，和第1点很相似。若先定义B类，那么我们观察一下B类定义中的如下语句</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">A::sum_2</span><span class="params">(B &amp;amp;b)</span></span>;     <span class="comment">// 友元函数 A::sum_2</span></span><br></pre></td></tr></table></figure><p><strong>该语句通过类名加域运算符，将A类的成员函数sum_2声明为友元函数。等等，是不是发现了什么，这是A类根本还没有定义，编译器只知道A是一个类名，A中具体有什么全然不知。如此，那么这一个语句当然无效咯！</strong></p><hr><p><a href="http://likeqc.gitee.io/" title="likeqc的博客">likeqc</a><br>ends</p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
